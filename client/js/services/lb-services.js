// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' &&
  module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {
  'use strict';

  var urlBase = "/api";
  var authHeader = 'authorization';

  function getHost(url) {
    var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
    return m ? m[1] : null;
  }

  var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
  var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.Admin
 * @header lbServices.Admin
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Admin` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Admin",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Admins/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__findById__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__updateById__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Admins/:id/accessTokens/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__get__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Queries accessTokens of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Admins/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__create__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__delete__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$__count__accessTokens
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Counts accessTokens of Admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Admins/:id/accessTokens/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#create
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Admins",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#createMany
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Admins",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#patchOrCreate
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Admins",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#replaceOrCreate
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Admins/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#upsertWithWhere
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Admins/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#exists
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Admins/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#findById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Admins/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#replaceById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Admins/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#find
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Admins",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#findOne
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Admins/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#updateAll
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Admins/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#deleteById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Admins/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#count
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Admins/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$patchAttributes
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Admins/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#createChangeStream
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Admins/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#login
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Admins/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#logout
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Admins/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#prototype$verify
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Admins/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#confirm
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Admins/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#resetPassword
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Admins/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#changePassword
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Admins/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#setPassword
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Admins/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#customLogin
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Custom login
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "customLogin": {
              url: urlBase + "/Admins/customLogin",
              method: "GET",
            },

            // INTERNAL. Use CustomerBlockCmd.admin() instead.
            "::get::CustomerBlockCmd::admin": {
              url: urlBase + "/CustomerBlockCmds/:id/admin",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Admin#getCurrent
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Admins" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Admin#upsert
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#updateOrCreate
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#patchOrCreateWithWhere
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#update
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#destroyById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#removeById
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Admin#updateAttributes
             * @methodOf lbServices.Admin
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Admin id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Admin#getCachedCurrent
         * @methodOf lbServices.Admin
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Admin#login} or
         * {@link lbServices.Admin#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Admin instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Admin#isAuthenticated
         * @methodOf lbServices.Admin
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Admin#getCurrentId
         * @methodOf lbServices.Admin
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Admin#modelName
        * @propertyOf lbServices.Admin
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Admin`.
        */
        R.modelName = "Admin";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Customer
 * @header lbServices.Customer
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Customer` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Customer",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Customers/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.Customer#prototype$__findById__accessTokens
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Find a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$__findById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/accessTokens/:fk",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#prototype$__destroyById__accessTokens
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Delete a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__destroyById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/accessTokens/:fk",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#prototype$__updateById__accessTokens
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Update a related item by id for accessTokens.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for accessTokens
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$__updateById__accessTokens": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/accessTokens/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.findById() instead.
            "prototype$__findById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/likeAndDisLikes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.destroyById() instead.
            "prototype$__destroyById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/likeAndDisLikes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.updateById() instead.
            "prototype$__updateById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/likeAndDisLikes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.customerBlockCmds.findById() instead.
            "prototype$__findById__customerBlockCmds": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/customerBlockCmds/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.customerBlockCmds.destroyById() instead.
            "prototype$__destroyById__customerBlockCmds": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/customerBlockCmds/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.customerBlockCmds.updateById() instead.
            "prototype$__updateById__customerBlockCmds": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/customerBlockCmds/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.forumCommands.findById() instead.
            "prototype$__findById__forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/forumCommands/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.forumCommands.destroyById() instead.
            "prototype$__destroyById__forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/forumCommands/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.forumCommands.updateById() instead.
            "prototype$__updateById__forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/forumCommands/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.contactus.findById() instead.
            "prototype$__findById__contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contactus/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.contactus.destroyById() instead.
            "prototype$__destroyById__contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contactus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.contactus.updateById() instead.
            "prototype$__updateById__contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contactus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.customerChatLists() instead.
            "prototype$__get__customerChatLists": {
              url: urlBase + "/Customers/:id/customerChatLists",
              method: "GET",
            },

            // INTERNAL. Use Customer.customerChatLists.create() instead.
            "prototype$__create__customerChatLists": {
              url: urlBase + "/Customers/:id/customerChatLists",
              method: "POST",
            },

            // INTERNAL. Use Customer.customerChatLists.update() instead.
            "prototype$__update__customerChatLists": {
              url: urlBase + "/Customers/:id/customerChatLists",
              method: "PUT",
            },

            // INTERNAL. Use Customer.customerChatLists.destroy() instead.
            "prototype$__destroy__customerChatLists": {
              url: urlBase + "/Customers/:id/customerChatLists",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.chatLists() instead.
            "prototype$__get__chatLists": {
              url: urlBase + "/Customers/:id/chatLists",
              method: "GET",
            },

            // INTERNAL. Use Customer.chatLists.create() instead.
            "prototype$__create__chatLists": {
              url: urlBase + "/Customers/:id/chatLists",
              method: "POST",
            },

            // INTERNAL. Use Customer.chatLists.update() instead.
            "prototype$__update__chatLists": {
              url: urlBase + "/Customers/:id/chatLists",
              method: "PUT",
            },

            // INTERNAL. Use Customer.chatLists.destroy() instead.
            "prototype$__destroy__chatLists": {
              url: urlBase + "/Customers/:id/chatLists",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.groupContacts.findById() instead.
            "prototype$__findById__groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupContacts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupContacts.destroyById() instead.
            "prototype$__destroyById__groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupContacts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.groupContacts.updateById() instead.
            "prototype$__updateById__groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupContacts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.groupChats.findById() instead.
            "prototype$__findById__groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupChats/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupChats.destroyById() instead.
            "prototype$__destroyById__groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupChats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.groupChats.updateById() instead.
            "prototype$__updateById__groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupChats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.readedOfMsgs.findById() instead.
            "prototype$__findById__readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/readedOfMsgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.readedOfMsgs.destroyById() instead.
            "prototype$__destroyById__readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/readedOfMsgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.readedOfMsgs.updateById() instead.
            "prototype$__updateById__readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/readedOfMsgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.friendRequests.findById() instead.
            "prototype$__findById__friendRequests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendRequests/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendRequests.destroyById() instead.
            "prototype$__destroyById__friendRequests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendRequests/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.friendRequests.updateById() instead.
            "prototype$__updateById__friendRequests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendRequests/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.friendAccept.findById() instead.
            "prototype$__findById__friendAccept": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendAccept/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendAccept.destroyById() instead.
            "prototype$__destroyById__friendAccept": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendAccept/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.friendAccept.updateById() instead.
            "prototype$__updateById__friendAccept": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendAccept/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.friendLists() instead.
            "prototype$__get__friendLists": {
              url: urlBase + "/Customers/:id/friendLists",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendLists.create() instead.
            "prototype$__create__friendLists": {
              url: urlBase + "/Customers/:id/friendLists",
              method: "POST",
            },

            // INTERNAL. Use Customer.friendLists.update() instead.
            "prototype$__update__friendLists": {
              url: urlBase + "/Customers/:id/friendLists",
              method: "PUT",
            },

            // INTERNAL. Use Customer.friendLists.destroy() instead.
            "prototype$__destroy__friendLists": {
              url: urlBase + "/Customers/:id/friendLists",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.teenacheCommands.findById() instead.
            "prototype$__findById__teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/teenacheCommands/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.teenacheCommands.destroyById() instead.
            "prototype$__destroyById__teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/teenacheCommands/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.teenacheCommands.updateById() instead.
            "prototype$__updateById__teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/teenacheCommands/:fk",
              method: "PUT",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#prototype$__get__accessTokens
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries accessTokens of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$__get__accessTokens": {
              isArray: true,
              url: urlBase + "/Customers/:id/accessTokens",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#prototype$__create__accessTokens
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Creates a new instance in accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$__create__accessTokens": {
              url: urlBase + "/Customers/:id/accessTokens",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#prototype$__delete__accessTokens
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Deletes all accessTokens of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$__delete__accessTokens": {
              url: urlBase + "/Customers/:id/accessTokens",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#prototype$__count__accessTokens
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Counts accessTokens of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "prototype$__count__accessTokens": {
              url: urlBase + "/Customers/:id/accessTokens/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.likeAndDisLikes() instead.
            "prototype$__get__likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Customers/:id/likeAndDisLikes",
              method: "GET",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.create() instead.
            "prototype$__create__likeAndDisLikes": {
              url: urlBase + "/Customers/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.destroyAll() instead.
            "prototype$__delete__likeAndDisLikes": {
              url: urlBase + "/Customers/:id/likeAndDisLikes",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.count() instead.
            "prototype$__count__likeAndDisLikes": {
              url: urlBase + "/Customers/:id/likeAndDisLikes/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.customerBlockCmds() instead.
            "prototype$__get__customerBlockCmds": {
              isArray: true,
              url: urlBase + "/Customers/:id/customerBlockCmds",
              method: "GET",
            },

            // INTERNAL. Use Customer.customerBlockCmds.create() instead.
            "prototype$__create__customerBlockCmds": {
              url: urlBase + "/Customers/:id/customerBlockCmds",
              method: "POST",
            },

            // INTERNAL. Use Customer.customerBlockCmds.destroyAll() instead.
            "prototype$__delete__customerBlockCmds": {
              url: urlBase + "/Customers/:id/customerBlockCmds",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.customerBlockCmds.count() instead.
            "prototype$__count__customerBlockCmds": {
              url: urlBase + "/Customers/:id/customerBlockCmds/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.forumCommands() instead.
            "prototype$__get__forumCommands": {
              isArray: true,
              url: urlBase + "/Customers/:id/forumCommands",
              method: "GET",
            },

            // INTERNAL. Use Customer.forumCommands.create() instead.
            "prototype$__create__forumCommands": {
              url: urlBase + "/Customers/:id/forumCommands",
              method: "POST",
            },

            // INTERNAL. Use Customer.forumCommands.destroyAll() instead.
            "prototype$__delete__forumCommands": {
              url: urlBase + "/Customers/:id/forumCommands",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.forumCommands.count() instead.
            "prototype$__count__forumCommands": {
              url: urlBase + "/Customers/:id/forumCommands/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.contactus() instead.
            "prototype$__get__contactus": {
              isArray: true,
              url: urlBase + "/Customers/:id/contactus",
              method: "GET",
            },

            // INTERNAL. Use Customer.contactus.create() instead.
            "prototype$__create__contactus": {
              url: urlBase + "/Customers/:id/contactus",
              method: "POST",
            },

            // INTERNAL. Use Customer.contactus.destroyAll() instead.
            "prototype$__delete__contactus": {
              url: urlBase + "/Customers/:id/contactus",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.contactus.count() instead.
            "prototype$__count__contactus": {
              url: urlBase + "/Customers/:id/contactus/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupContacts() instead.
            "prototype$__get__groupContacts": {
              isArray: true,
              url: urlBase + "/Customers/:id/groupContacts",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupContacts.create() instead.
            "prototype$__create__groupContacts": {
              url: urlBase + "/Customers/:id/groupContacts",
              method: "POST",
            },

            // INTERNAL. Use Customer.groupContacts.destroyAll() instead.
            "prototype$__delete__groupContacts": {
              url: urlBase + "/Customers/:id/groupContacts",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.groupContacts.count() instead.
            "prototype$__count__groupContacts": {
              url: urlBase + "/Customers/:id/groupContacts/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupChats() instead.
            "prototype$__get__groupChats": {
              isArray: true,
              url: urlBase + "/Customers/:id/groupChats",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupChats.create() instead.
            "prototype$__create__groupChats": {
              url: urlBase + "/Customers/:id/groupChats",
              method: "POST",
            },

            // INTERNAL. Use Customer.groupChats.destroyAll() instead.
            "prototype$__delete__groupChats": {
              url: urlBase + "/Customers/:id/groupChats",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.groupChats.count() instead.
            "prototype$__count__groupChats": {
              url: urlBase + "/Customers/:id/groupChats/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.readedOfMsgs() instead.
            "prototype$__get__readedOfMsgs": {
              isArray: true,
              url: urlBase + "/Customers/:id/readedOfMsgs",
              method: "GET",
            },

            // INTERNAL. Use Customer.readedOfMsgs.create() instead.
            "prototype$__create__readedOfMsgs": {
              url: urlBase + "/Customers/:id/readedOfMsgs",
              method: "POST",
            },

            // INTERNAL. Use Customer.readedOfMsgs.destroyAll() instead.
            "prototype$__delete__readedOfMsgs": {
              url: urlBase + "/Customers/:id/readedOfMsgs",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.readedOfMsgs.count() instead.
            "prototype$__count__readedOfMsgs": {
              url: urlBase + "/Customers/:id/readedOfMsgs/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendRequests() instead.
            "prototype$__get__friendRequests": {
              isArray: true,
              url: urlBase + "/Customers/:id/friendRequests",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendRequests.create() instead.
            "prototype$__create__friendRequests": {
              url: urlBase + "/Customers/:id/friendRequests",
              method: "POST",
            },

            // INTERNAL. Use Customer.friendRequests.destroyAll() instead.
            "prototype$__delete__friendRequests": {
              url: urlBase + "/Customers/:id/friendRequests",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.friendRequests.count() instead.
            "prototype$__count__friendRequests": {
              url: urlBase + "/Customers/:id/friendRequests/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendAccept() instead.
            "prototype$__get__friendAccept": {
              isArray: true,
              url: urlBase + "/Customers/:id/friendAccept",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendAccept.create() instead.
            "prototype$__create__friendAccept": {
              url: urlBase + "/Customers/:id/friendAccept",
              method: "POST",
            },

            // INTERNAL. Use Customer.friendAccept.destroyAll() instead.
            "prototype$__delete__friendAccept": {
              url: urlBase + "/Customers/:id/friendAccept",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.friendAccept.count() instead.
            "prototype$__count__friendAccept": {
              url: urlBase + "/Customers/:id/friendAccept/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.teenacheCommands() instead.
            "prototype$__get__teenacheCommands": {
              isArray: true,
              url: urlBase + "/Customers/:id/teenacheCommands",
              method: "GET",
            },

            // INTERNAL. Use Customer.teenacheCommands.create() instead.
            "prototype$__create__teenacheCommands": {
              url: urlBase + "/Customers/:id/teenacheCommands",
              method: "POST",
            },

            // INTERNAL. Use Customer.teenacheCommands.destroyAll() instead.
            "prototype$__delete__teenacheCommands": {
              url: urlBase + "/Customers/:id/teenacheCommands",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.teenacheCommands.count() instead.
            "prototype$__count__teenacheCommands": {
              url: urlBase + "/Customers/:id/teenacheCommands/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#create
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Customers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#createMany
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Customers",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#patchOrCreate
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Customers",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#replaceOrCreate
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Customers/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#upsertWithWhere
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Customers/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#exists
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Customers/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#findById
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Customers/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#replaceById
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Customers/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#find
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Customers",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#findOne
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Customers/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#updateAll
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Customers/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#deleteById
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Customers/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#count
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Customers/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#prototype$patchAttributes
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Customers/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#createChangeStream
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Customers/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#login
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Login a user with username/email and password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
             *   Default value: `user`.
             *
             *  - `rememberMe` - `boolean` - Whether the authentication credentials
             *     should be remembered in localStorage across app/browser restarts.
             *     Default: `true`.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * The response body contains properties of the AccessToken created on login.
             * Depending on the value of `include` parameter, the body may contain additional properties:
             *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)
             *
             */
            "login": {
              params: {
                include: 'user',
              },
              interceptor: {
                response: function(response) {
                  var accessToken = response.data;
                  LoopBackAuth.setUser(
                    accessToken.id, accessToken.userId, accessToken.user);
                  LoopBackAuth.rememberMe =
                    response.config.params.rememberMe !== false;
                  LoopBackAuth.save();
                  return response.resource;
                },
              },
              url: urlBase + "/Customers/login",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#logout
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Logout a user with access token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `access_token` – `{string=}` - Do not supply this argument, it is automatically extracted from request headers.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "logout": {
              interceptor: {
                response: function(response) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return responseError.resource;
                },
              },
              url: urlBase + "/Customers/logout",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#prototype$verify
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Trigger user's identity verification with configured verifyOptions
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `verifyOptions` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "prototype$verify": {
              url: urlBase + "/Customers/:id/verify",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#confirm
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Confirm a user registration with identity verification token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `uid` – `{string}` -
             *
             *  - `token` – `{string}` -
             *
             *  - `redirect` – `{string=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "confirm": {
              url: urlBase + "/Customers/confirm",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#resetPassword
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Reset password for a user with email.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             * This method expects a subset of model properties as request parameters.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "resetPassword": {
              url: urlBase + "/Customers/reset",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#changePassword
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Change a user's password.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `oldPassword` – `{string}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "changePassword": {
              url: urlBase + "/Customers/change-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#setPassword
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Reset user's password via a password-reset token.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `id` – `{*=}` -
             *
             *  - `newPassword` – `{string}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
            "setPassword": {
              url: urlBase + "/Customers/reset-password",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#vaildOtpAndActiveUser
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * vaildOtp
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "vaildOtpAndActiveUser": {
              url: urlBase + "/Customers/vaildOtpAndActiveUser",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#vaildOtp
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * vaildOtp
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "vaildOtp": {
              url: urlBase + "/Customers/vaildOtp",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#resetPwd
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * reset password
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "resetPwd": {
              url: urlBase + "/Customers/resetPwd",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#forgotPwdAndVaild
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Forgot Password And Vaild
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "forgotPwdAndVaild": {
              url: urlBase + "/Customers/forgotPwdAndVaild",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#setOffline
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * get customer update offline
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "setOffline": {
              url: urlBase + "/Customers/setOffline",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#setOnline
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * get customer update online
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "setOnline": {
              url: urlBase + "/Customers/setOnline",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#offline
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * get customer offline
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "offline": {
              url: urlBase + "/Customers/offline",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#getOffLineUser
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * get customer offline
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getOffLineUser": {
              url: urlBase + "/Customers/getOffLineUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#getOnLineUser
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * get customer online
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getOnLineUser": {
              url: urlBase + "/Customers/getOnLineUser",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#loginFromGoogle
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * loginFromGoogle
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "loginFromGoogle": {
              url: urlBase + "/Customers/loginFromGoogle",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#customCreate
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Create customer
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "customCreate": {
              url: urlBase + "/Customers/customCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#customLogin
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Custom login
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "customLogin": {
              url: urlBase + "/Customers/customLogin",
              method: "POST",
            },

            // INTERNAL. Use LikeAndDisLike.customer() instead.
            "::get::LikeAndDisLike::customer": {
              url: urlBase + "/LikeAndDisLikes/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use ForumCommand.customer() instead.
            "::get::ForumCommand::customer": {
              url: urlBase + "/ForumCommands/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use Contactus.customer() instead.
            "::get::Contactus::customer": {
              url: urlBase + "/Contactus/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.customer() instead.
            "::get::CustomerChatList::customer": {
              url: urlBase + "/CustomerChatLists/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use ChatList.customer() instead.
            "::get::ChatList::customer": {
              url: urlBase + "/ChatLists/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use GroupContact.customer() instead.
            "::get::GroupContact::customer": {
              url: urlBase + "/GroupContacts/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use GroupChat.customer() instead.
            "::get::GroupChat::customer": {
              url: urlBase + "/GroupChats/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use ReadedOfMsg.customer() instead.
            "::get::ReadedOfMsg::customer": {
              url: urlBase + "/ReadedOfMsgs/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use FriendRequest.request() instead.
            "::get::FriendRequest::request": {
              url: urlBase + "/FriendRequests/:id/request",
              method: "GET",
            },

            // INTERNAL. Use FriendRequest.accept() instead.
            "::get::FriendRequest::accept": {
              url: urlBase + "/FriendRequests/:id/accept",
              method: "GET",
            },

            // INTERNAL. Use FriendList.customer() instead.
            "::get::FriendList::customer": {
              url: urlBase + "/FriendLists/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use TeenacheCommand.customer() instead.
            "::get::TeenacheCommand::customer": {
              url: urlBase + "/TeenacheCommands/:id/customer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Customer#getCurrent
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Get data of the currently logged user. Fail with HTTP result 401
             * when there is no user logged in.
             *
             * @param {function(Object,Object)=} successCb
             *    Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *    `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             */
            'getCurrent': {
              url: urlBase + "/Customers" + '/:id',
              method: 'GET',
              params: {
                id: function() {
                  var id = LoopBackAuth.currentUserId;
                  if (id == null) id = '__anonymous__';
                  return id;
                },
              },
              interceptor: {
                response: function(response) {
                  LoopBackAuth.currentUserData = response.data;
                  return response.resource;
                },
                responseError: function(responseError) {
                  LoopBackAuth.clearUser();
                  LoopBackAuth.clearStorage();
                  return $q.reject(responseError);
                },
              },
              __isGetCurrentUser__: true,
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Customer#upsert
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#updateOrCreate
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#patchOrCreateWithWhere
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#update
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#destroyById
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#removeById
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Customer#updateAttributes
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];

        /**
         * @ngdoc method
         * @name lbServices.Customer#getCachedCurrent
         * @methodOf lbServices.Customer
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.Customer#login} or
         * {@link lbServices.Customer#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A Customer instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Customer#isAuthenticated
         * @methodOf lbServices.Customer
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.Customer#getCurrentId
         * @methodOf lbServices.Customer
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

        /**
        * @ngdoc property
        * @name lbServices.Customer#modelName
        * @propertyOf lbServices.Customer
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Customer`.
        */
        R.modelName = "Customer";

    /**
     * @ngdoc object
     * @name lbServices.Customer.likeAndDisLikes
     * @header lbServices.Customer.likeAndDisLikes
     * @object
     * @description
     *
     * The object `Customer.likeAndDisLikes` groups methods
     * manipulating `LikeAndDisLike` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#likeAndDisLikes Customer.likeAndDisLikes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#likeAndDisLikes
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries likeAndDisLikes of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::get::Customer::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.likeAndDisLikes#count
             * @methodOf lbServices.Customer.likeAndDisLikes
             *
             * @description
             *
             * Counts likeAndDisLikes of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.likeAndDisLikes.count = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::count::Customer::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.likeAndDisLikes#create
             * @methodOf lbServices.Customer.likeAndDisLikes
             *
             * @description
             *
             * Creates a new instance in likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.create = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::create::Customer::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.likeAndDisLikes#createMany
             * @methodOf lbServices.Customer.likeAndDisLikes
             *
             * @description
             *
             * Creates a new instance in likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.createMany = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::createMany::Customer::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.likeAndDisLikes#destroyAll
             * @methodOf lbServices.Customer.likeAndDisLikes
             *
             * @description
             *
             * Deletes all likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeAndDisLikes.destroyAll = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::delete::Customer::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.likeAndDisLikes#destroyById
             * @methodOf lbServices.Customer.likeAndDisLikes
             *
             * @description
             *
             * Delete a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeAndDisLikes.destroyById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::destroyById::Customer::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.likeAndDisLikes#findById
             * @methodOf lbServices.Customer.likeAndDisLikes
             *
             * @description
             *
             * Find a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.findById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::findById::Customer::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.likeAndDisLikes#updateById
             * @methodOf lbServices.Customer.likeAndDisLikes
             *
             * @description
             *
             * Update a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.updateById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::updateById::Customer::likeAndDisLikes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.customerBlockCmds
     * @header lbServices.Customer.customerBlockCmds
     * @object
     * @description
     *
     * The object `Customer.customerBlockCmds` groups methods
     * manipulating `CustomerBlockCmd` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#customerBlockCmds Customer.customerBlockCmds()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#customerBlockCmds
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries customerBlockCmds of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R.customerBlockCmds = function() {
          var TargetResource = $injector.get("CustomerBlockCmd");
          var action = TargetResource["::get::Customer::customerBlockCmds"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerBlockCmds#count
             * @methodOf lbServices.Customer.customerBlockCmds
             *
             * @description
             *
             * Counts customerBlockCmds of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.customerBlockCmds.count = function() {
          var TargetResource = $injector.get("CustomerBlockCmd");
          var action = TargetResource["::count::Customer::customerBlockCmds"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerBlockCmds#create
             * @methodOf lbServices.Customer.customerBlockCmds
             *
             * @description
             *
             * Creates a new instance in customerBlockCmds of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R.customerBlockCmds.create = function() {
          var TargetResource = $injector.get("CustomerBlockCmd");
          var action = TargetResource["::create::Customer::customerBlockCmds"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerBlockCmds#createMany
             * @methodOf lbServices.Customer.customerBlockCmds
             *
             * @description
             *
             * Creates a new instance in customerBlockCmds of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R.customerBlockCmds.createMany = function() {
          var TargetResource = $injector.get("CustomerBlockCmd");
          var action = TargetResource["::createMany::Customer::customerBlockCmds"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerBlockCmds#destroyAll
             * @methodOf lbServices.Customer.customerBlockCmds
             *
             * @description
             *
             * Deletes all customerBlockCmds of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.customerBlockCmds.destroyAll = function() {
          var TargetResource = $injector.get("CustomerBlockCmd");
          var action = TargetResource["::delete::Customer::customerBlockCmds"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerBlockCmds#destroyById
             * @methodOf lbServices.Customer.customerBlockCmds
             *
             * @description
             *
             * Delete a related item by id for customerBlockCmds.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for customerBlockCmds
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.customerBlockCmds.destroyById = function() {
          var TargetResource = $injector.get("CustomerBlockCmd");
          var action = TargetResource["::destroyById::Customer::customerBlockCmds"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerBlockCmds#findById
             * @methodOf lbServices.Customer.customerBlockCmds
             *
             * @description
             *
             * Find a related item by id for customerBlockCmds.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for customerBlockCmds
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R.customerBlockCmds.findById = function() {
          var TargetResource = $injector.get("CustomerBlockCmd");
          var action = TargetResource["::findById::Customer::customerBlockCmds"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerBlockCmds#updateById
             * @methodOf lbServices.Customer.customerBlockCmds
             *
             * @description
             *
             * Update a related item by id for customerBlockCmds.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for customerBlockCmds
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R.customerBlockCmds.updateById = function() {
          var TargetResource = $injector.get("CustomerBlockCmd");
          var action = TargetResource["::updateById::Customer::customerBlockCmds"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.forumCommands
     * @header lbServices.Customer.forumCommands
     * @object
     * @description
     *
     * The object `Customer.forumCommands` groups methods
     * manipulating `ForumCommand` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#forumCommands Customer.forumCommands()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#forumCommands
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries forumCommands of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R.forumCommands = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::get::Customer::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.forumCommands#count
             * @methodOf lbServices.Customer.forumCommands
             *
             * @description
             *
             * Counts forumCommands of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.forumCommands.count = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::count::Customer::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.forumCommands#create
             * @methodOf lbServices.Customer.forumCommands
             *
             * @description
             *
             * Creates a new instance in forumCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R.forumCommands.create = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::create::Customer::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.forumCommands#createMany
             * @methodOf lbServices.Customer.forumCommands
             *
             * @description
             *
             * Creates a new instance in forumCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R.forumCommands.createMany = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::createMany::Customer::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.forumCommands#destroyAll
             * @methodOf lbServices.Customer.forumCommands
             *
             * @description
             *
             * Deletes all forumCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.forumCommands.destroyAll = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::delete::Customer::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.forumCommands#destroyById
             * @methodOf lbServices.Customer.forumCommands
             *
             * @description
             *
             * Delete a related item by id for forumCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for forumCommands
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.forumCommands.destroyById = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::destroyById::Customer::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.forumCommands#findById
             * @methodOf lbServices.Customer.forumCommands
             *
             * @description
             *
             * Find a related item by id for forumCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for forumCommands
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R.forumCommands.findById = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::findById::Customer::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.forumCommands#updateById
             * @methodOf lbServices.Customer.forumCommands
             *
             * @description
             *
             * Update a related item by id for forumCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for forumCommands
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R.forumCommands.updateById = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::updateById::Customer::forumCommands"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.contactus
     * @header lbServices.Customer.contactus
     * @object
     * @description
     *
     * The object `Customer.contactus` groups methods
     * manipulating `Contactus` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#contactus Customer.contactus()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#contactus
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries contactus of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R.contactus = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::get::Customer::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contactus#count
             * @methodOf lbServices.Customer.contactus
             *
             * @description
             *
             * Counts contactus of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.contactus.count = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::count::Customer::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contactus#create
             * @methodOf lbServices.Customer.contactus
             *
             * @description
             *
             * Creates a new instance in contactus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R.contactus.create = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::create::Customer::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contactus#createMany
             * @methodOf lbServices.Customer.contactus
             *
             * @description
             *
             * Creates a new instance in contactus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R.contactus.createMany = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::createMany::Customer::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contactus#destroyAll
             * @methodOf lbServices.Customer.contactus
             *
             * @description
             *
             * Deletes all contactus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contactus.destroyAll = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::delete::Customer::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contactus#destroyById
             * @methodOf lbServices.Customer.contactus
             *
             * @description
             *
             * Delete a related item by id for contactus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for contactus
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contactus.destroyById = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::destroyById::Customer::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contactus#findById
             * @methodOf lbServices.Customer.contactus
             *
             * @description
             *
             * Find a related item by id for contactus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for contactus
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R.contactus.findById = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::findById::Customer::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.contactus#updateById
             * @methodOf lbServices.Customer.contactus
             *
             * @description
             *
             * Update a related item by id for contactus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for contactus
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R.contactus.updateById = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::updateById::Customer::contactus"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.customerChatLists
     * @header lbServices.Customer.customerChatLists
     * @object
     * @description
     *
     * The object `Customer.customerChatLists` groups methods
     * manipulating `CustomerChatList` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#customerChatLists Customer.customerChatLists()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#customerChatLists
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Fetches hasOne relation customerChatLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R.customerChatLists = function() {
          var TargetResource = $injector.get("CustomerChatList");
          var action = TargetResource["::get::Customer::customerChatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerChatLists#create
             * @methodOf lbServices.Customer.customerChatLists
             *
             * @description
             *
             * Creates a new instance in customerChatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R.customerChatLists.create = function() {
          var TargetResource = $injector.get("CustomerChatList");
          var action = TargetResource["::create::Customer::customerChatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerChatLists#createMany
             * @methodOf lbServices.Customer.customerChatLists
             *
             * @description
             *
             * Creates a new instance in customerChatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R.customerChatLists.createMany = function() {
          var TargetResource = $injector.get("CustomerChatList");
          var action = TargetResource["::createMany::Customer::customerChatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerChatLists#destroy
             * @methodOf lbServices.Customer.customerChatLists
             *
             * @description
             *
             * Deletes customerChatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.customerChatLists.destroy = function() {
          var TargetResource = $injector.get("CustomerChatList");
          var action = TargetResource["::destroy::Customer::customerChatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.customerChatLists#update
             * @methodOf lbServices.Customer.customerChatLists
             *
             * @description
             *
             * Update customerChatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R.customerChatLists.update = function() {
          var TargetResource = $injector.get("CustomerChatList");
          var action = TargetResource["::update::Customer::customerChatLists"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.chatLists
     * @header lbServices.Customer.chatLists
     * @object
     * @description
     *
     * The object `Customer.chatLists` groups methods
     * manipulating `ChatList` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#chatLists Customer.chatLists()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#chatLists
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Fetches hasOne relation chatLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatLists = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::get::Customer::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.chatLists#create
             * @methodOf lbServices.Customer.chatLists
             *
             * @description
             *
             * Creates a new instance in chatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatLists.create = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::create::Customer::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.chatLists#createMany
             * @methodOf lbServices.Customer.chatLists
             *
             * @description
             *
             * Creates a new instance in chatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatLists.createMany = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::createMany::Customer::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.chatLists#destroy
             * @methodOf lbServices.Customer.chatLists
             *
             * @description
             *
             * Deletes chatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.chatLists.destroy = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::destroy::Customer::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.chatLists#update
             * @methodOf lbServices.Customer.chatLists
             *
             * @description
             *
             * Update chatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatLists.update = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::update::Customer::chatLists"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.groupContacts
     * @header lbServices.Customer.groupContacts
     * @object
     * @description
     *
     * The object `Customer.groupContacts` groups methods
     * manipulating `GroupContact` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#groupContacts Customer.groupContacts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#groupContacts
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries groupContacts of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R.groupContacts = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::get::Customer::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupContacts#count
             * @methodOf lbServices.Customer.groupContacts
             *
             * @description
             *
             * Counts groupContacts of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.groupContacts.count = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::count::Customer::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupContacts#create
             * @methodOf lbServices.Customer.groupContacts
             *
             * @description
             *
             * Creates a new instance in groupContacts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R.groupContacts.create = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::create::Customer::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupContacts#createMany
             * @methodOf lbServices.Customer.groupContacts
             *
             * @description
             *
             * Creates a new instance in groupContacts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R.groupContacts.createMany = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::createMany::Customer::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupContacts#destroyAll
             * @methodOf lbServices.Customer.groupContacts
             *
             * @description
             *
             * Deletes all groupContacts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.groupContacts.destroyAll = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::delete::Customer::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupContacts#destroyById
             * @methodOf lbServices.Customer.groupContacts
             *
             * @description
             *
             * Delete a related item by id for groupContacts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for groupContacts
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.groupContacts.destroyById = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::destroyById::Customer::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupContacts#findById
             * @methodOf lbServices.Customer.groupContacts
             *
             * @description
             *
             * Find a related item by id for groupContacts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for groupContacts
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R.groupContacts.findById = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::findById::Customer::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupContacts#updateById
             * @methodOf lbServices.Customer.groupContacts
             *
             * @description
             *
             * Update a related item by id for groupContacts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for groupContacts
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R.groupContacts.updateById = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::updateById::Customer::groupContacts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.groupChats
     * @header lbServices.Customer.groupChats
     * @object
     * @description
     *
     * The object `Customer.groupChats` groups methods
     * manipulating `GroupChat` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#groupChats Customer.groupChats()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#groupChats
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries groupChats of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChats = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::get::Customer::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupChats#count
             * @methodOf lbServices.Customer.groupChats
             *
             * @description
             *
             * Counts groupChats of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.groupChats.count = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::count::Customer::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupChats#create
             * @methodOf lbServices.Customer.groupChats
             *
             * @description
             *
             * Creates a new instance in groupChats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChats.create = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::create::Customer::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupChats#createMany
             * @methodOf lbServices.Customer.groupChats
             *
             * @description
             *
             * Creates a new instance in groupChats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChats.createMany = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::createMany::Customer::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupChats#destroyAll
             * @methodOf lbServices.Customer.groupChats
             *
             * @description
             *
             * Deletes all groupChats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.groupChats.destroyAll = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::delete::Customer::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupChats#destroyById
             * @methodOf lbServices.Customer.groupChats
             *
             * @description
             *
             * Delete a related item by id for groupChats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for groupChats
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.groupChats.destroyById = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::destroyById::Customer::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupChats#findById
             * @methodOf lbServices.Customer.groupChats
             *
             * @description
             *
             * Find a related item by id for groupChats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for groupChats
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChats.findById = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::findById::Customer::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.groupChats#updateById
             * @methodOf lbServices.Customer.groupChats
             *
             * @description
             *
             * Update a related item by id for groupChats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for groupChats
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChats.updateById = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::updateById::Customer::groupChats"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.readedOfMsgs
     * @header lbServices.Customer.readedOfMsgs
     * @object
     * @description
     *
     * The object `Customer.readedOfMsgs` groups methods
     * manipulating `ReadedOfMsg` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#readedOfMsgs Customer.readedOfMsgs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#readedOfMsgs
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries readedOfMsgs of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R.readedOfMsgs = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::get::Customer::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.readedOfMsgs#count
             * @methodOf lbServices.Customer.readedOfMsgs
             *
             * @description
             *
             * Counts readedOfMsgs of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.readedOfMsgs.count = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::count::Customer::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.readedOfMsgs#create
             * @methodOf lbServices.Customer.readedOfMsgs
             *
             * @description
             *
             * Creates a new instance in readedOfMsgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R.readedOfMsgs.create = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::create::Customer::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.readedOfMsgs#createMany
             * @methodOf lbServices.Customer.readedOfMsgs
             *
             * @description
             *
             * Creates a new instance in readedOfMsgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R.readedOfMsgs.createMany = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::createMany::Customer::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.readedOfMsgs#destroyAll
             * @methodOf lbServices.Customer.readedOfMsgs
             *
             * @description
             *
             * Deletes all readedOfMsgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.readedOfMsgs.destroyAll = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::delete::Customer::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.readedOfMsgs#destroyById
             * @methodOf lbServices.Customer.readedOfMsgs
             *
             * @description
             *
             * Delete a related item by id for readedOfMsgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for readedOfMsgs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.readedOfMsgs.destroyById = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::destroyById::Customer::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.readedOfMsgs#findById
             * @methodOf lbServices.Customer.readedOfMsgs
             *
             * @description
             *
             * Find a related item by id for readedOfMsgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for readedOfMsgs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R.readedOfMsgs.findById = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::findById::Customer::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.readedOfMsgs#updateById
             * @methodOf lbServices.Customer.readedOfMsgs
             *
             * @description
             *
             * Update a related item by id for readedOfMsgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for readedOfMsgs
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R.readedOfMsgs.updateById = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::updateById::Customer::readedOfMsgs"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.friendRequests
     * @header lbServices.Customer.friendRequests
     * @object
     * @description
     *
     * The object `Customer.friendRequests` groups methods
     * manipulating `FriendRequest` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#friendRequests Customer.friendRequests()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#friendRequests
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries friendRequests of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendRequests = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::get::Customer::friendRequests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendRequests#count
             * @methodOf lbServices.Customer.friendRequests
             *
             * @description
             *
             * Counts friendRequests of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.friendRequests.count = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::count::Customer::friendRequests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendRequests#create
             * @methodOf lbServices.Customer.friendRequests
             *
             * @description
             *
             * Creates a new instance in friendRequests of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendRequests.create = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::create::Customer::friendRequests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendRequests#createMany
             * @methodOf lbServices.Customer.friendRequests
             *
             * @description
             *
             * Creates a new instance in friendRequests of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendRequests.createMany = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::createMany::Customer::friendRequests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendRequests#destroyAll
             * @methodOf lbServices.Customer.friendRequests
             *
             * @description
             *
             * Deletes all friendRequests of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.friendRequests.destroyAll = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::delete::Customer::friendRequests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendRequests#destroyById
             * @methodOf lbServices.Customer.friendRequests
             *
             * @description
             *
             * Delete a related item by id for friendRequests.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for friendRequests
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.friendRequests.destroyById = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::destroyById::Customer::friendRequests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendRequests#findById
             * @methodOf lbServices.Customer.friendRequests
             *
             * @description
             *
             * Find a related item by id for friendRequests.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for friendRequests
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendRequests.findById = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::findById::Customer::friendRequests"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendRequests#updateById
             * @methodOf lbServices.Customer.friendRequests
             *
             * @description
             *
             * Update a related item by id for friendRequests.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for friendRequests
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendRequests.updateById = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::updateById::Customer::friendRequests"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.friendAccept
     * @header lbServices.Customer.friendAccept
     * @object
     * @description
     *
     * The object `Customer.friendAccept` groups methods
     * manipulating `FriendRequest` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#friendAccept Customer.friendAccept()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#friendAccept
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries friendAccept of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendAccept = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::get::Customer::friendAccept"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendAccept#count
             * @methodOf lbServices.Customer.friendAccept
             *
             * @description
             *
             * Counts friendAccept of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.friendAccept.count = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::count::Customer::friendAccept"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendAccept#create
             * @methodOf lbServices.Customer.friendAccept
             *
             * @description
             *
             * Creates a new instance in friendAccept of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendAccept.create = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::create::Customer::friendAccept"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendAccept#createMany
             * @methodOf lbServices.Customer.friendAccept
             *
             * @description
             *
             * Creates a new instance in friendAccept of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendAccept.createMany = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::createMany::Customer::friendAccept"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendAccept#destroyAll
             * @methodOf lbServices.Customer.friendAccept
             *
             * @description
             *
             * Deletes all friendAccept of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.friendAccept.destroyAll = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::delete::Customer::friendAccept"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendAccept#destroyById
             * @methodOf lbServices.Customer.friendAccept
             *
             * @description
             *
             * Delete a related item by id for friendAccept.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for friendAccept
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.friendAccept.destroyById = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::destroyById::Customer::friendAccept"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendAccept#findById
             * @methodOf lbServices.Customer.friendAccept
             *
             * @description
             *
             * Find a related item by id for friendAccept.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for friendAccept
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendAccept.findById = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::findById::Customer::friendAccept"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendAccept#updateById
             * @methodOf lbServices.Customer.friendAccept
             *
             * @description
             *
             * Update a related item by id for friendAccept.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for friendAccept
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendAccept.updateById = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::updateById::Customer::friendAccept"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.friendLists
     * @header lbServices.Customer.friendLists
     * @object
     * @description
     *
     * The object `Customer.friendLists` groups methods
     * manipulating `FriendList` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#friendLists Customer.friendLists()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#friendLists
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Fetches hasOne relation friendLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::get::Customer::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendLists#create
             * @methodOf lbServices.Customer.friendLists
             *
             * @description
             *
             * Creates a new instance in friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists.create = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::create::Customer::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendLists#createMany
             * @methodOf lbServices.Customer.friendLists
             *
             * @description
             *
             * Creates a new instance in friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists.createMany = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::createMany::Customer::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendLists#destroy
             * @methodOf lbServices.Customer.friendLists
             *
             * @description
             *
             * Deletes friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.friendLists.destroy = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::destroy::Customer::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.friendLists#update
             * @methodOf lbServices.Customer.friendLists
             *
             * @description
             *
             * Update friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists.update = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::update::Customer::friendLists"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Customer.teenacheCommands
     * @header lbServices.Customer.teenacheCommands
     * @object
     * @description
     *
     * The object `Customer.teenacheCommands` groups methods
     * manipulating `TeenacheCommand` instances related to `Customer`.
     *
     * Call {@link lbServices.Customer#teenacheCommands Customer.teenacheCommands()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Customer#teenacheCommands
             * @methodOf lbServices.Customer
             *
             * @description
             *
             * Queries teenacheCommands of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R.teenacheCommands = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::get::Customer::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.teenacheCommands#count
             * @methodOf lbServices.Customer.teenacheCommands
             *
             * @description
             *
             * Counts teenacheCommands of Customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.teenacheCommands.count = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::count::Customer::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.teenacheCommands#create
             * @methodOf lbServices.Customer.teenacheCommands
             *
             * @description
             *
             * Creates a new instance in teenacheCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R.teenacheCommands.create = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::create::Customer::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.teenacheCommands#createMany
             * @methodOf lbServices.Customer.teenacheCommands
             *
             * @description
             *
             * Creates a new instance in teenacheCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R.teenacheCommands.createMany = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::createMany::Customer::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.teenacheCommands#destroyAll
             * @methodOf lbServices.Customer.teenacheCommands
             *
             * @description
             *
             * Deletes all teenacheCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teenacheCommands.destroyAll = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::delete::Customer::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.teenacheCommands#destroyById
             * @methodOf lbServices.Customer.teenacheCommands
             *
             * @description
             *
             * Delete a related item by id for teenacheCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for teenacheCommands
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teenacheCommands.destroyById = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::destroyById::Customer::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.teenacheCommands#findById
             * @methodOf lbServices.Customer.teenacheCommands
             *
             * @description
             *
             * Find a related item by id for teenacheCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for teenacheCommands
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R.teenacheCommands.findById = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::findById::Customer::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Customer.teenacheCommands#updateById
             * @methodOf lbServices.Customer.teenacheCommands
             *
             * @description
             *
             * Update a related item by id for teenacheCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Customer id
             *
             *  - `fk` – `{*}` - Foreign key for teenacheCommands
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R.teenacheCommands.updateById = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::updateById::Customer::teenacheCommands"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Blog
 * @header lbServices.Blog
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Blog` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Blog",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Blogs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Blog.likeAndDisLikes.findById() instead.
            "prototype$__findById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Blogs/:id/likeAndDisLikes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.destroyById() instead.
            "prototype$__destroyById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Blogs/:id/likeAndDisLikes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.updateById() instead.
            "prototype$__updateById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Blogs/:id/likeAndDisLikes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Blog.likeAndDisLikes() instead.
            "prototype$__get__likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Blogs/:id/likeAndDisLikes",
              method: "GET",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.create() instead.
            "prototype$__create__likeAndDisLikes": {
              url: urlBase + "/Blogs/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.destroyAll() instead.
            "prototype$__delete__likeAndDisLikes": {
              url: urlBase + "/Blogs/:id/likeAndDisLikes",
              method: "DELETE",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.count() instead.
            "prototype$__count__likeAndDisLikes": {
              url: urlBase + "/Blogs/:id/likeAndDisLikes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#create
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Blogs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#createMany
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Blogs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#patchOrCreate
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Blogs",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#replaceOrCreate
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Blogs/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#upsertWithWhere
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Blogs/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#exists
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Blogs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#findById
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Blogs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#replaceById
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Blogs/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#find
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Blogs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#findOne
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Blogs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#updateAll
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Blogs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#deleteById
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Blogs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#count
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Blogs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#prototype$patchAttributes
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Blog id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Blogs/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#createChangeStream
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Blogs/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#getAllBlog
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * getAllBlog
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getAllBlog": {
              url: urlBase + "/Blogs/getAllBlog",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Blog#getFindOne
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * getFindOne
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getFindOne": {
              url: urlBase + "/Blogs/getFindOne",
              method: "GET",
            },

            // INTERNAL. Use LikeAndDisLike.blog() instead.
            "::get::LikeAndDisLike::blog": {
              url: urlBase + "/LikeAndDisLikes/:id/blog",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Blog#upsert
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Blog#updateOrCreate
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Blog#patchOrCreateWithWhere
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Blog#update
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Blog#destroyById
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Blog#removeById
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Blog#updateAttributes
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Blog id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Blog#modelName
        * @propertyOf lbServices.Blog
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Blog`.
        */
        R.modelName = "Blog";

    /**
     * @ngdoc object
     * @name lbServices.Blog.likeAndDisLikes
     * @header lbServices.Blog.likeAndDisLikes
     * @object
     * @description
     *
     * The object `Blog.likeAndDisLikes` groups methods
     * manipulating `LikeAndDisLike` instances related to `Blog`.
     *
     * Call {@link lbServices.Blog#likeAndDisLikes Blog.likeAndDisLikes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Blog#likeAndDisLikes
             * @methodOf lbServices.Blog
             *
             * @description
             *
             * Queries likeAndDisLikes of Blog.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Blog id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::get::Blog::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Blog.likeAndDisLikes#count
             * @methodOf lbServices.Blog.likeAndDisLikes
             *
             * @description
             *
             * Counts likeAndDisLikes of Blog.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Blog id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.likeAndDisLikes.count = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::count::Blog::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Blog.likeAndDisLikes#create
             * @methodOf lbServices.Blog.likeAndDisLikes
             *
             * @description
             *
             * Creates a new instance in likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Blog id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.create = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::create::Blog::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Blog.likeAndDisLikes#createMany
             * @methodOf lbServices.Blog.likeAndDisLikes
             *
             * @description
             *
             * Creates a new instance in likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Blog id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.createMany = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::createMany::Blog::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Blog.likeAndDisLikes#destroyAll
             * @methodOf lbServices.Blog.likeAndDisLikes
             *
             * @description
             *
             * Deletes all likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Blog id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeAndDisLikes.destroyAll = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::delete::Blog::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Blog.likeAndDisLikes#destroyById
             * @methodOf lbServices.Blog.likeAndDisLikes
             *
             * @description
             *
             * Delete a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Blog id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeAndDisLikes.destroyById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::destroyById::Blog::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Blog.likeAndDisLikes#findById
             * @methodOf lbServices.Blog.likeAndDisLikes
             *
             * @description
             *
             * Find a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Blog id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.findById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::findById::Blog::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Blog.likeAndDisLikes#updateById
             * @methodOf lbServices.Blog.likeAndDisLikes
             *
             * @description
             *
             * Update a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Blog id
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.updateById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::updateById::Blog::likeAndDisLikes"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ForumCategory
 * @header lbServices.ForumCategory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ForumCategory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ForumCategory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ForumCategories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ForumCategory.forums.findById() instead.
            "prototype$__findById__forums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ForumCategories/:id/forums/:fk",
              method: "GET",
            },

            // INTERNAL. Use ForumCategory.forums.destroyById() instead.
            "prototype$__destroyById__forums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ForumCategories/:id/forums/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ForumCategory.forums.updateById() instead.
            "prototype$__updateById__forums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ForumCategories/:id/forums/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ForumCategory.forums() instead.
            "prototype$__get__forums": {
              isArray: true,
              url: urlBase + "/ForumCategories/:id/forums",
              method: "GET",
            },

            // INTERNAL. Use ForumCategory.forums.create() instead.
            "prototype$__create__forums": {
              url: urlBase + "/ForumCategories/:id/forums",
              method: "POST",
            },

            // INTERNAL. Use ForumCategory.forums.destroyAll() instead.
            "prototype$__delete__forums": {
              url: urlBase + "/ForumCategories/:id/forums",
              method: "DELETE",
            },

            // INTERNAL. Use ForumCategory.forums.count() instead.
            "prototype$__count__forums": {
              url: urlBase + "/ForumCategories/:id/forums/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#create
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ForumCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#createMany
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ForumCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#patchOrCreate
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/ForumCategories",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#replaceOrCreate
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ForumCategories/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#upsertWithWhere
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ForumCategories/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#exists
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ForumCategories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#findById
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ForumCategories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#replaceById
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ForumCategories/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#find
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ForumCategories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#findOne
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ForumCategories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#updateAll
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ForumCategories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#deleteById
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ForumCategories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#count
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ForumCategories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#prototype$patchAttributes
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/ForumCategories/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#createChangeStream
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ForumCategories/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#getForumFromCategory
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * getForumFromCategory
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getForumFromCategory": {
              url: urlBase + "/ForumCategories/getForumFromCategory",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#getCategories
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * getCategories
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getCategories": {
              url: urlBase + "/ForumCategories/getCategories",
              method: "GET",
            },

            // INTERNAL. Use Forum.forumCategory() instead.
            "::get::Forum::forumCategory": {
              url: urlBase + "/Forums/:id/forumCategory",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#upsert
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#updateOrCreate
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#patchOrCreateWithWhere
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#update
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#destroyById
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#removeById
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#updateAttributes
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ForumCategory#modelName
        * @propertyOf lbServices.ForumCategory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ForumCategory`.
        */
        R.modelName = "ForumCategory";

    /**
     * @ngdoc object
     * @name lbServices.ForumCategory.forums
     * @header lbServices.ForumCategory.forums
     * @object
     * @description
     *
     * The object `ForumCategory.forums` groups methods
     * manipulating `Forum` instances related to `ForumCategory`.
     *
     * Call {@link lbServices.ForumCategory#forums ForumCategory.forums()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ForumCategory#forums
             * @methodOf lbServices.ForumCategory
             *
             * @description
             *
             * Queries forums of ForumCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R.forums = function() {
          var TargetResource = $injector.get("Forum");
          var action = TargetResource["::get::ForumCategory::forums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory.forums#count
             * @methodOf lbServices.ForumCategory.forums
             *
             * @description
             *
             * Counts forums of ForumCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.forums.count = function() {
          var TargetResource = $injector.get("Forum");
          var action = TargetResource["::count::ForumCategory::forums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory.forums#create
             * @methodOf lbServices.ForumCategory.forums
             *
             * @description
             *
             * Creates a new instance in forums of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCategory id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R.forums.create = function() {
          var TargetResource = $injector.get("Forum");
          var action = TargetResource["::create::ForumCategory::forums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory.forums#createMany
             * @methodOf lbServices.ForumCategory.forums
             *
             * @description
             *
             * Creates a new instance in forums of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCategory id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R.forums.createMany = function() {
          var TargetResource = $injector.get("Forum");
          var action = TargetResource["::createMany::ForumCategory::forums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory.forums#destroyAll
             * @methodOf lbServices.ForumCategory.forums
             *
             * @description
             *
             * Deletes all forums of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.forums.destroyAll = function() {
          var TargetResource = $injector.get("Forum");
          var action = TargetResource["::delete::ForumCategory::forums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory.forums#destroyById
             * @methodOf lbServices.ForumCategory.forums
             *
             * @description
             *
             * Delete a related item by id for forums.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for forums
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.forums.destroyById = function() {
          var TargetResource = $injector.get("Forum");
          var action = TargetResource["::destroyById::ForumCategory::forums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory.forums#findById
             * @methodOf lbServices.ForumCategory.forums
             *
             * @description
             *
             * Find a related item by id for forums.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for forums
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R.forums.findById = function() {
          var TargetResource = $injector.get("Forum");
          var action = TargetResource["::findById::ForumCategory::forums"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ForumCategory.forums#updateById
             * @methodOf lbServices.ForumCategory.forums
             *
             * @description
             *
             * Update a related item by id for forums.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCategory id
             *
             *  - `fk` – `{*}` - Foreign key for forums
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R.forums.updateById = function() {
          var TargetResource = $injector.get("Forum");
          var action = TargetResource["::updateById::ForumCategory::forums"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Forum
 * @header lbServices.Forum
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Forum` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Forum",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Forums/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Forum.forumCategory() instead.
            "prototype$__get__forumCategory": {
              url: urlBase + "/Forums/:id/forumCategory",
              method: "GET",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.findById() instead.
            "prototype$__findById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/likeAndDisLikes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.destroyById() instead.
            "prototype$__destroyById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/likeAndDisLikes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.updateById() instead.
            "prototype$__updateById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/likeAndDisLikes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Forum.forumCommands.findById() instead.
            "prototype$__findById__forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/forumCommands/:fk",
              method: "GET",
            },

            // INTERNAL. Use Forum.forumCommands.destroyById() instead.
            "prototype$__destroyById__forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/forumCommands/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Forum.forumCommands.updateById() instead.
            "prototype$__updateById__forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/forumCommands/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Forum.likeAndDisLikes() instead.
            "prototype$__get__likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Forums/:id/likeAndDisLikes",
              method: "GET",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.create() instead.
            "prototype$__create__likeAndDisLikes": {
              url: urlBase + "/Forums/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.destroyAll() instead.
            "prototype$__delete__likeAndDisLikes": {
              url: urlBase + "/Forums/:id/likeAndDisLikes",
              method: "DELETE",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.count() instead.
            "prototype$__count__likeAndDisLikes": {
              url: urlBase + "/Forums/:id/likeAndDisLikes/count",
              method: "GET",
            },

            // INTERNAL. Use Forum.forumCommands() instead.
            "prototype$__get__forumCommands": {
              isArray: true,
              url: urlBase + "/Forums/:id/forumCommands",
              method: "GET",
            },

            // INTERNAL. Use Forum.forumCommands.create() instead.
            "prototype$__create__forumCommands": {
              url: urlBase + "/Forums/:id/forumCommands",
              method: "POST",
            },

            // INTERNAL. Use Forum.forumCommands.destroyAll() instead.
            "prototype$__delete__forumCommands": {
              url: urlBase + "/Forums/:id/forumCommands",
              method: "DELETE",
            },

            // INTERNAL. Use Forum.forumCommands.count() instead.
            "prototype$__count__forumCommands": {
              url: urlBase + "/Forums/:id/forumCommands/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#create
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Forums",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#createMany
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Forums",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#patchOrCreate
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Forums",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#replaceOrCreate
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Forums/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#upsertWithWhere
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Forums/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#exists
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Forums/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#findById
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Forums/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#replaceById
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Forums/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#find
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Forums",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#findOne
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Forums/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#updateAll
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Forums/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#deleteById
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Forums/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#count
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Forums/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#prototype$patchAttributes
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Forums/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#createChangeStream
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Forums/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Forum#getFindOne
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * getFindOne
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getFindOne": {
              url: urlBase + "/Forums/getFindOne",
              method: "GET",
            },

            // INTERNAL. Use ForumCategory.forums.findById() instead.
            "::findById::ForumCategory::forums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ForumCategories/:id/forums/:fk",
              method: "GET",
            },

            // INTERNAL. Use ForumCategory.forums.destroyById() instead.
            "::destroyById::ForumCategory::forums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ForumCategories/:id/forums/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ForumCategory.forums.updateById() instead.
            "::updateById::ForumCategory::forums": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ForumCategories/:id/forums/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ForumCategory.forums() instead.
            "::get::ForumCategory::forums": {
              isArray: true,
              url: urlBase + "/ForumCategories/:id/forums",
              method: "GET",
            },

            // INTERNAL. Use ForumCategory.forums.create() instead.
            "::create::ForumCategory::forums": {
              url: urlBase + "/ForumCategories/:id/forums",
              method: "POST",
            },

            // INTERNAL. Use ForumCategory.forums.createMany() instead.
            "::createMany::ForumCategory::forums": {
              isArray: true,
              url: urlBase + "/ForumCategories/:id/forums",
              method: "POST",
            },

            // INTERNAL. Use ForumCategory.forums.destroyAll() instead.
            "::delete::ForumCategory::forums": {
              url: urlBase + "/ForumCategories/:id/forums",
              method: "DELETE",
            },

            // INTERNAL. Use ForumCategory.forums.count() instead.
            "::count::ForumCategory::forums": {
              url: urlBase + "/ForumCategories/:id/forums/count",
              method: "GET",
            },

            // INTERNAL. Use LikeAndDisLike.forum() instead.
            "::get::LikeAndDisLike::forum": {
              url: urlBase + "/LikeAndDisLikes/:id/forum",
              method: "GET",
            },

            // INTERNAL. Use ForumCommand.forum() instead.
            "::get::ForumCommand::forum": {
              url: urlBase + "/ForumCommands/:id/forum",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Forum#upsert
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Forum#updateOrCreate
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Forum#patchOrCreateWithWhere
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Forum#update
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Forum#destroyById
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Forum#removeById
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Forum#updateAttributes
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Forum#modelName
        * @propertyOf lbServices.Forum
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Forum`.
        */
        R.modelName = "Forum";


            /**
             * @ngdoc method
             * @name lbServices.Forum#forumCategory
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Fetches belongsTo relation forumCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCategory` object.)
             * </em>
             */
        R.forumCategory = function() {
          var TargetResource = $injector.get("ForumCategory");
          var action = TargetResource["::get::Forum::forumCategory"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Forum.likeAndDisLikes
     * @header lbServices.Forum.likeAndDisLikes
     * @object
     * @description
     *
     * The object `Forum.likeAndDisLikes` groups methods
     * manipulating `LikeAndDisLike` instances related to `Forum`.
     *
     * Call {@link lbServices.Forum#likeAndDisLikes Forum.likeAndDisLikes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Forum#likeAndDisLikes
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Queries likeAndDisLikes of Forum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::get::Forum::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.likeAndDisLikes#count
             * @methodOf lbServices.Forum.likeAndDisLikes
             *
             * @description
             *
             * Counts likeAndDisLikes of Forum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.likeAndDisLikes.count = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::count::Forum::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.likeAndDisLikes#create
             * @methodOf lbServices.Forum.likeAndDisLikes
             *
             * @description
             *
             * Creates a new instance in likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.create = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::create::Forum::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.likeAndDisLikes#createMany
             * @methodOf lbServices.Forum.likeAndDisLikes
             *
             * @description
             *
             * Creates a new instance in likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.createMany = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::createMany::Forum::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.likeAndDisLikes#destroyAll
             * @methodOf lbServices.Forum.likeAndDisLikes
             *
             * @description
             *
             * Deletes all likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeAndDisLikes.destroyAll = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::delete::Forum::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.likeAndDisLikes#destroyById
             * @methodOf lbServices.Forum.likeAndDisLikes
             *
             * @description
             *
             * Delete a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeAndDisLikes.destroyById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::destroyById::Forum::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.likeAndDisLikes#findById
             * @methodOf lbServices.Forum.likeAndDisLikes
             *
             * @description
             *
             * Find a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.findById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::findById::Forum::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.likeAndDisLikes#updateById
             * @methodOf lbServices.Forum.likeAndDisLikes
             *
             * @description
             *
             * Update a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.updateById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::updateById::Forum::likeAndDisLikes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Forum.forumCommands
     * @header lbServices.Forum.forumCommands
     * @object
     * @description
     *
     * The object `Forum.forumCommands` groups methods
     * manipulating `ForumCommand` instances related to `Forum`.
     *
     * Call {@link lbServices.Forum#forumCommands Forum.forumCommands()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Forum#forumCommands
             * @methodOf lbServices.Forum
             *
             * @description
             *
             * Queries forumCommands of Forum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R.forumCommands = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::get::Forum::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.forumCommands#count
             * @methodOf lbServices.Forum.forumCommands
             *
             * @description
             *
             * Counts forumCommands of Forum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.forumCommands.count = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::count::Forum::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.forumCommands#create
             * @methodOf lbServices.Forum.forumCommands
             *
             * @description
             *
             * Creates a new instance in forumCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R.forumCommands.create = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::create::Forum::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.forumCommands#createMany
             * @methodOf lbServices.Forum.forumCommands
             *
             * @description
             *
             * Creates a new instance in forumCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R.forumCommands.createMany = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::createMany::Forum::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.forumCommands#destroyAll
             * @methodOf lbServices.Forum.forumCommands
             *
             * @description
             *
             * Deletes all forumCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.forumCommands.destroyAll = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::delete::Forum::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.forumCommands#destroyById
             * @methodOf lbServices.Forum.forumCommands
             *
             * @description
             *
             * Delete a related item by id for forumCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for forumCommands
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.forumCommands.destroyById = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::destroyById::Forum::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.forumCommands#findById
             * @methodOf lbServices.Forum.forumCommands
             *
             * @description
             *
             * Find a related item by id for forumCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for forumCommands
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R.forumCommands.findById = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::findById::Forum::forumCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Forum.forumCommands#updateById
             * @methodOf lbServices.Forum.forumCommands
             *
             * @description
             *
             * Update a related item by id for forumCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Forum id
             *
             *  - `fk` – `{*}` - Foreign key for forumCommands
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R.forumCommands.updateById = function() {
          var TargetResource = $injector.get("ForumCommand");
          var action = TargetResource["::updateById::Forum::forumCommands"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.LikeAndDisLike
 * @header lbServices.LikeAndDisLike
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `LikeAndDisLike` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "LikeAndDisLike",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/LikeAndDisLikes/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use LikeAndDisLike.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/LikeAndDisLikes/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use LikeAndDisLike.blog() instead.
            "prototype$__get__blog": {
              url: urlBase + "/LikeAndDisLikes/:id/blog",
              method: "GET",
            },

            // INTERNAL. Use LikeAndDisLike.forum() instead.
            "prototype$__get__forum": {
              url: urlBase + "/LikeAndDisLikes/:id/forum",
              method: "GET",
            },

            // INTERNAL. Use LikeAndDisLike.teenache() instead.
            "prototype$__get__teenache": {
              url: urlBase + "/LikeAndDisLikes/:id/teenache",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#create
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/LikeAndDisLikes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#createMany
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/LikeAndDisLikes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#patchOrCreate
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/LikeAndDisLikes",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#replaceOrCreate
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/LikeAndDisLikes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#upsertWithWhere
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/LikeAndDisLikes/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#exists
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/LikeAndDisLikes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#findById
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/LikeAndDisLikes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#replaceById
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/LikeAndDisLikes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#find
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/LikeAndDisLikes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#findOne
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/LikeAndDisLikes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#updateAll
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/LikeAndDisLikes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#deleteById
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/LikeAndDisLikes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#count
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/LikeAndDisLikes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#prototype$patchAttributes
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LikeAndDisLike id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/LikeAndDisLikes/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#createChangeStream
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/LikeAndDisLikes/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#forumLikeAndDisLikeCnt
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * forumLikeAndDisLikeCnt
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "forumLikeAndDisLikeCnt": {
              url: urlBase + "/LikeAndDisLikes/forumLikeAndDisLikeCnt",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#teenacheLikeAndDisLikeCnt
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * teenacheLikeAndDisLikeCnt
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "teenacheLikeAndDisLikeCnt": {
              url: urlBase + "/LikeAndDisLikes/teenacheLikeAndDisLikeCnt",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#blogLikeAndDisLikeCnt
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * blogLikeAndDisLikeCnt
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "blogLikeAndDisLikeCnt": {
              url: urlBase + "/LikeAndDisLikes/blogLikeAndDisLikeCnt",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#likeForBlog
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * likeForBlog
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "likeForBlog": {
              url: urlBase + "/LikeAndDisLikes/likeForBlog",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#likeForTeenache
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * likeForTeenache
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "likeForTeenache": {
              url: urlBase + "/LikeAndDisLikes/likeForTeenache",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#likeForForum
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * likeForForum
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "likeForForum": {
              url: urlBase + "/LikeAndDisLikes/likeForForum",
              method: "GET",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.findById() instead.
            "::findById::Customer::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/likeAndDisLikes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.destroyById() instead.
            "::destroyById::Customer::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/likeAndDisLikes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.updateById() instead.
            "::updateById::Customer::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/likeAndDisLikes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.likeAndDisLikes() instead.
            "::get::Customer::likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Customers/:id/likeAndDisLikes",
              method: "GET",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.create() instead.
            "::create::Customer::likeAndDisLikes": {
              url: urlBase + "/Customers/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.createMany() instead.
            "::createMany::Customer::likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Customers/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.destroyAll() instead.
            "::delete::Customer::likeAndDisLikes": {
              url: urlBase + "/Customers/:id/likeAndDisLikes",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.likeAndDisLikes.count() instead.
            "::count::Customer::likeAndDisLikes": {
              url: urlBase + "/Customers/:id/likeAndDisLikes/count",
              method: "GET",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.findById() instead.
            "::findById::Blog::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Blogs/:id/likeAndDisLikes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.destroyById() instead.
            "::destroyById::Blog::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Blogs/:id/likeAndDisLikes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.updateById() instead.
            "::updateById::Blog::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Blogs/:id/likeAndDisLikes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Blog.likeAndDisLikes() instead.
            "::get::Blog::likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Blogs/:id/likeAndDisLikes",
              method: "GET",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.create() instead.
            "::create::Blog::likeAndDisLikes": {
              url: urlBase + "/Blogs/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.createMany() instead.
            "::createMany::Blog::likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Blogs/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.destroyAll() instead.
            "::delete::Blog::likeAndDisLikes": {
              url: urlBase + "/Blogs/:id/likeAndDisLikes",
              method: "DELETE",
            },

            // INTERNAL. Use Blog.likeAndDisLikes.count() instead.
            "::count::Blog::likeAndDisLikes": {
              url: urlBase + "/Blogs/:id/likeAndDisLikes/count",
              method: "GET",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.findById() instead.
            "::findById::Forum::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/likeAndDisLikes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.destroyById() instead.
            "::destroyById::Forum::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/likeAndDisLikes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.updateById() instead.
            "::updateById::Forum::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/likeAndDisLikes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Forum.likeAndDisLikes() instead.
            "::get::Forum::likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Forums/:id/likeAndDisLikes",
              method: "GET",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.create() instead.
            "::create::Forum::likeAndDisLikes": {
              url: urlBase + "/Forums/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.createMany() instead.
            "::createMany::Forum::likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Forums/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.destroyAll() instead.
            "::delete::Forum::likeAndDisLikes": {
              url: urlBase + "/Forums/:id/likeAndDisLikes",
              method: "DELETE",
            },

            // INTERNAL. Use Forum.likeAndDisLikes.count() instead.
            "::count::Forum::likeAndDisLikes": {
              url: urlBase + "/Forums/:id/likeAndDisLikes/count",
              method: "GET",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.findById() instead.
            "::findById::Teenache::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/likeAndDisLikes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.destroyById() instead.
            "::destroyById::Teenache::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/likeAndDisLikes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.updateById() instead.
            "::updateById::Teenache::likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/likeAndDisLikes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes() instead.
            "::get::Teenache::likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Teenaches/:id/likeAndDisLikes",
              method: "GET",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.create() instead.
            "::create::Teenache::likeAndDisLikes": {
              url: urlBase + "/Teenaches/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.createMany() instead.
            "::createMany::Teenache::likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Teenaches/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.destroyAll() instead.
            "::delete::Teenache::likeAndDisLikes": {
              url: urlBase + "/Teenaches/:id/likeAndDisLikes",
              method: "DELETE",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.count() instead.
            "::count::Teenache::likeAndDisLikes": {
              url: urlBase + "/Teenaches/:id/likeAndDisLikes/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#upsert
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#updateOrCreate
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#patchOrCreateWithWhere
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#update
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#destroyById
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#removeById
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#updateAttributes
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LikeAndDisLike id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.LikeAndDisLike#modelName
        * @propertyOf lbServices.LikeAndDisLike
        * @description
        * The name of the model represented by this $resource,
        * i.e. `LikeAndDisLike`.
        */
        R.modelName = "LikeAndDisLike";


            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#customer
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LikeAndDisLike id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::LikeAndDisLike::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#blog
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Fetches belongsTo relation blog.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LikeAndDisLike id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Blog` object.)
             * </em>
             */
        R.blog = function() {
          var TargetResource = $injector.get("Blog");
          var action = TargetResource["::get::LikeAndDisLike::blog"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#forum
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Fetches belongsTo relation forum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LikeAndDisLike id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R.forum = function() {
          var TargetResource = $injector.get("Forum");
          var action = TargetResource["::get::LikeAndDisLike::forum"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.LikeAndDisLike#teenache
             * @methodOf lbServices.LikeAndDisLike
             *
             * @description
             *
             * Fetches belongsTo relation teenache.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - LikeAndDisLike id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
        R.teenache = function() {
          var TargetResource = $injector.get("Teenache");
          var action = TargetResource["::get::LikeAndDisLike::teenache"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.EditorNote
 * @header lbServices.EditorNote
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EditorNote` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "EditorNote",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/EditorNotes/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#create
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/EditorNotes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#createMany
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/EditorNotes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#patchOrCreate
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/EditorNotes",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#replaceOrCreate
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/EditorNotes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#upsertWithWhere
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/EditorNotes/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#exists
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/EditorNotes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#findById
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/EditorNotes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#replaceById
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/EditorNotes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#find
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/EditorNotes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#findOne
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/EditorNotes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#updateAll
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/EditorNotes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#deleteById
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/EditorNotes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#count
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/EditorNotes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#prototype$patchAttributes
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - EditorNote id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/EditorNotes/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#createChangeStream
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/EditorNotes/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#getFindAll
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * getFindAll
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getFindAll": {
              url: urlBase + "/EditorNotes/getFindAll",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#getFindOne
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * getFindOne
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getFindOne": {
              url: urlBase + "/EditorNotes/getFindOne",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.EditorNote#upsert
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#updateOrCreate
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#patchOrCreateWithWhere
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#update
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#destroyById
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#removeById
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.EditorNote#updateAttributes
             * @methodOf lbServices.EditorNote
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - EditorNote id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `EditorNote` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.EditorNote#modelName
        * @propertyOf lbServices.EditorNote
        * @description
        * The name of the model represented by this $resource,
        * i.e. `EditorNote`.
        */
        R.modelName = "EditorNote";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.CustomerBlockCmd
 * @header lbServices.CustomerBlockCmd
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CustomerBlockCmd` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "CustomerBlockCmd",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/CustomerBlockCmds/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use CustomerBlockCmd.admin() instead.
            "prototype$__get__admin": {
              url: urlBase + "/CustomerBlockCmds/:id/admin",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#create
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/CustomerBlockCmds",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#createMany
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/CustomerBlockCmds",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#patchOrCreate
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/CustomerBlockCmds",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#replaceOrCreate
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/CustomerBlockCmds/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#upsertWithWhere
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/CustomerBlockCmds/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#exists
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/CustomerBlockCmds/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#findById
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/CustomerBlockCmds/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#replaceById
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/CustomerBlockCmds/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#find
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/CustomerBlockCmds",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#findOne
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/CustomerBlockCmds/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#updateAll
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/CustomerBlockCmds/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#deleteById
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/CustomerBlockCmds/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#count
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/CustomerBlockCmds/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#prototype$patchAttributes
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerBlockCmd id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/CustomerBlockCmds/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#createChangeStream
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/CustomerBlockCmds/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Customer.customerBlockCmds.findById() instead.
            "::findById::Customer::customerBlockCmds": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/customerBlockCmds/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.customerBlockCmds.destroyById() instead.
            "::destroyById::Customer::customerBlockCmds": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/customerBlockCmds/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.customerBlockCmds.updateById() instead.
            "::updateById::Customer::customerBlockCmds": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/customerBlockCmds/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.customerBlockCmds() instead.
            "::get::Customer::customerBlockCmds": {
              isArray: true,
              url: urlBase + "/Customers/:id/customerBlockCmds",
              method: "GET",
            },

            // INTERNAL. Use Customer.customerBlockCmds.create() instead.
            "::create::Customer::customerBlockCmds": {
              url: urlBase + "/Customers/:id/customerBlockCmds",
              method: "POST",
            },

            // INTERNAL. Use Customer.customerBlockCmds.createMany() instead.
            "::createMany::Customer::customerBlockCmds": {
              isArray: true,
              url: urlBase + "/Customers/:id/customerBlockCmds",
              method: "POST",
            },

            // INTERNAL. Use Customer.customerBlockCmds.destroyAll() instead.
            "::delete::Customer::customerBlockCmds": {
              url: urlBase + "/Customers/:id/customerBlockCmds",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.customerBlockCmds.count() instead.
            "::count::Customer::customerBlockCmds": {
              url: urlBase + "/Customers/:id/customerBlockCmds/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#upsert
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#updateOrCreate
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#patchOrCreateWithWhere
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#update
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#destroyById
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#removeById
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#updateAttributes
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerBlockCmd id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerBlockCmd` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.CustomerBlockCmd#modelName
        * @propertyOf lbServices.CustomerBlockCmd
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CustomerBlockCmd`.
        */
        R.modelName = "CustomerBlockCmd";


            /**
             * @ngdoc method
             * @name lbServices.CustomerBlockCmd#admin
             * @methodOf lbServices.CustomerBlockCmd
             *
             * @description
             *
             * Fetches belongsTo relation admin.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerBlockCmd id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Admin` object.)
             * </em>
             */
        R.admin = function() {
          var TargetResource = $injector.get("Admin");
          var action = TargetResource["::get::CustomerBlockCmd::admin"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ForumCommand
 * @header lbServices.ForumCommand
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ForumCommand` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ForumCommand",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ForumCommands/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ForumCommand.forum() instead.
            "prototype$__get__forum": {
              url: urlBase + "/ForumCommands/:id/forum",
              method: "GET",
            },

            // INTERNAL. Use ForumCommand.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/ForumCommands/:id/customer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#create
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ForumCommands",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#createMany
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ForumCommands",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#patchOrCreate
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/ForumCommands",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#replaceOrCreate
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ForumCommands/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#upsertWithWhere
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ForumCommands/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#exists
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ForumCommands/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#findById
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ForumCommands/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#replaceById
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ForumCommands/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#find
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ForumCommands",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#findOne
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ForumCommands/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#updateAll
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ForumCommands/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#deleteById
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ForumCommands/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#count
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ForumCommands/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#prototype$patchAttributes
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCommand id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/ForumCommands/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#createChangeStream
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ForumCommands/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#findCommands
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * findCommands
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "findCommands": {
              url: urlBase + "/ForumCommands/findCommands",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#createCommand
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * createCommand
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "createCommand": {
              url: urlBase + "/ForumCommands/createCommand",
              method: "POST",
            },

            // INTERNAL. Use Customer.forumCommands.findById() instead.
            "::findById::Customer::forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/forumCommands/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.forumCommands.destroyById() instead.
            "::destroyById::Customer::forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/forumCommands/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.forumCommands.updateById() instead.
            "::updateById::Customer::forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/forumCommands/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.forumCommands() instead.
            "::get::Customer::forumCommands": {
              isArray: true,
              url: urlBase + "/Customers/:id/forumCommands",
              method: "GET",
            },

            // INTERNAL. Use Customer.forumCommands.create() instead.
            "::create::Customer::forumCommands": {
              url: urlBase + "/Customers/:id/forumCommands",
              method: "POST",
            },

            // INTERNAL. Use Customer.forumCommands.createMany() instead.
            "::createMany::Customer::forumCommands": {
              isArray: true,
              url: urlBase + "/Customers/:id/forumCommands",
              method: "POST",
            },

            // INTERNAL. Use Customer.forumCommands.destroyAll() instead.
            "::delete::Customer::forumCommands": {
              url: urlBase + "/Customers/:id/forumCommands",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.forumCommands.count() instead.
            "::count::Customer::forumCommands": {
              url: urlBase + "/Customers/:id/forumCommands/count",
              method: "GET",
            },

            // INTERNAL. Use Forum.forumCommands.findById() instead.
            "::findById::Forum::forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/forumCommands/:fk",
              method: "GET",
            },

            // INTERNAL. Use Forum.forumCommands.destroyById() instead.
            "::destroyById::Forum::forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/forumCommands/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Forum.forumCommands.updateById() instead.
            "::updateById::Forum::forumCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Forums/:id/forumCommands/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Forum.forumCommands() instead.
            "::get::Forum::forumCommands": {
              isArray: true,
              url: urlBase + "/Forums/:id/forumCommands",
              method: "GET",
            },

            // INTERNAL. Use Forum.forumCommands.create() instead.
            "::create::Forum::forumCommands": {
              url: urlBase + "/Forums/:id/forumCommands",
              method: "POST",
            },

            // INTERNAL. Use Forum.forumCommands.createMany() instead.
            "::createMany::Forum::forumCommands": {
              isArray: true,
              url: urlBase + "/Forums/:id/forumCommands",
              method: "POST",
            },

            // INTERNAL. Use Forum.forumCommands.destroyAll() instead.
            "::delete::Forum::forumCommands": {
              url: urlBase + "/Forums/:id/forumCommands",
              method: "DELETE",
            },

            // INTERNAL. Use Forum.forumCommands.count() instead.
            "::count::Forum::forumCommands": {
              url: urlBase + "/Forums/:id/forumCommands/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#upsert
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#updateOrCreate
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#patchOrCreateWithWhere
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#update
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#destroyById
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#removeById
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#updateAttributes
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCommand id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ForumCommand` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ForumCommand#modelName
        * @propertyOf lbServices.ForumCommand
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ForumCommand`.
        */
        R.modelName = "ForumCommand";


            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#forum
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Fetches belongsTo relation forum.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCommand id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Forum` object.)
             * </em>
             */
        R.forum = function() {
          var TargetResource = $injector.get("Forum");
          var action = TargetResource["::get::ForumCommand::forum"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ForumCommand#customer
             * @methodOf lbServices.ForumCommand
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ForumCommand id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::ForumCommand::customer"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Contactus
 * @header lbServices.Contactus
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Contactus` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Contactus",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Contactus/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Contactus.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/Contactus/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use Contactus.feedBackCategory() instead.
            "prototype$__get__feedBackCategory": {
              url: urlBase + "/Contactus/:id/feedBackCategory",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#create
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Contactus",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#createMany
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Contactus",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#patchOrCreate
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Contactus",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#replaceOrCreate
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Contactus/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#upsertWithWhere
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Contactus/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#exists
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Contactus/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#findById
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Contactus/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#replaceById
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Contactus/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#find
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Contactus",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#findOne
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Contactus/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#updateAll
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Contactus/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#deleteById
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Contactus/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#count
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Contactus/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#prototype$patchAttributes
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Contactus id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Contactus/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#createChangeStream
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Contactus/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Contactus#createFeedBack
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * createFeedBack
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "createFeedBack": {
              url: urlBase + "/Contactus/createFeedBack",
              method: "POST",
            },

            // INTERNAL. Use Customer.contactus.findById() instead.
            "::findById::Customer::contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contactus/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.contactus.destroyById() instead.
            "::destroyById::Customer::contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contactus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.contactus.updateById() instead.
            "::updateById::Customer::contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/contactus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.contactus() instead.
            "::get::Customer::contactus": {
              isArray: true,
              url: urlBase + "/Customers/:id/contactus",
              method: "GET",
            },

            // INTERNAL. Use Customer.contactus.create() instead.
            "::create::Customer::contactus": {
              url: urlBase + "/Customers/:id/contactus",
              method: "POST",
            },

            // INTERNAL. Use Customer.contactus.createMany() instead.
            "::createMany::Customer::contactus": {
              isArray: true,
              url: urlBase + "/Customers/:id/contactus",
              method: "POST",
            },

            // INTERNAL. Use Customer.contactus.destroyAll() instead.
            "::delete::Customer::contactus": {
              url: urlBase + "/Customers/:id/contactus",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.contactus.count() instead.
            "::count::Customer::contactus": {
              url: urlBase + "/Customers/:id/contactus/count",
              method: "GET",
            },

            // INTERNAL. Use FeedBackCategory.contactus.findById() instead.
            "::findById::FeedBackCategory::contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeedBackCategories/:id/contactus/:fk",
              method: "GET",
            },

            // INTERNAL. Use FeedBackCategory.contactus.destroyById() instead.
            "::destroyById::FeedBackCategory::contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeedBackCategories/:id/contactus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FeedBackCategory.contactus.updateById() instead.
            "::updateById::FeedBackCategory::contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeedBackCategories/:id/contactus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FeedBackCategory.contactus() instead.
            "::get::FeedBackCategory::contactus": {
              isArray: true,
              url: urlBase + "/FeedBackCategories/:id/contactus",
              method: "GET",
            },

            // INTERNAL. Use FeedBackCategory.contactus.create() instead.
            "::create::FeedBackCategory::contactus": {
              url: urlBase + "/FeedBackCategories/:id/contactus",
              method: "POST",
            },

            // INTERNAL. Use FeedBackCategory.contactus.createMany() instead.
            "::createMany::FeedBackCategory::contactus": {
              isArray: true,
              url: urlBase + "/FeedBackCategories/:id/contactus",
              method: "POST",
            },

            // INTERNAL. Use FeedBackCategory.contactus.destroyAll() instead.
            "::delete::FeedBackCategory::contactus": {
              url: urlBase + "/FeedBackCategories/:id/contactus",
              method: "DELETE",
            },

            // INTERNAL. Use FeedBackCategory.contactus.count() instead.
            "::count::FeedBackCategory::contactus": {
              url: urlBase + "/FeedBackCategories/:id/contactus/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Contactus#upsert
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Contactus#updateOrCreate
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Contactus#patchOrCreateWithWhere
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Contactus#update
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Contactus#destroyById
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Contactus#removeById
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Contactus#updateAttributes
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Contactus id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Contactus#modelName
        * @propertyOf lbServices.Contactus
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Contactus`.
        */
        R.modelName = "Contactus";


            /**
             * @ngdoc method
             * @name lbServices.Contactus#customer
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Contactus id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::Contactus::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Contactus#feedBackCategory
             * @methodOf lbServices.Contactus
             *
             * @description
             *
             * Fetches belongsTo relation feedBackCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Contactus id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
        R.feedBackCategory = function() {
          var TargetResource = $injector.get("FeedBackCategory");
          var action = TargetResource["::get::Contactus::feedBackCategory"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FeedBackCategory
 * @header lbServices.FeedBackCategory
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FeedBackCategory` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FeedBackCategory",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FeedBackCategories/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FeedBackCategory.contactus.findById() instead.
            "prototype$__findById__contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeedBackCategories/:id/contactus/:fk",
              method: "GET",
            },

            // INTERNAL. Use FeedBackCategory.contactus.destroyById() instead.
            "prototype$__destroyById__contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeedBackCategories/:id/contactus/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use FeedBackCategory.contactus.updateById() instead.
            "prototype$__updateById__contactus": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/FeedBackCategories/:id/contactus/:fk",
              method: "PUT",
            },

            // INTERNAL. Use FeedBackCategory.contactus() instead.
            "prototype$__get__contactus": {
              isArray: true,
              url: urlBase + "/FeedBackCategories/:id/contactus",
              method: "GET",
            },

            // INTERNAL. Use FeedBackCategory.contactus.create() instead.
            "prototype$__create__contactus": {
              url: urlBase + "/FeedBackCategories/:id/contactus",
              method: "POST",
            },

            // INTERNAL. Use FeedBackCategory.contactus.destroyAll() instead.
            "prototype$__delete__contactus": {
              url: urlBase + "/FeedBackCategories/:id/contactus",
              method: "DELETE",
            },

            // INTERNAL. Use FeedBackCategory.contactus.count() instead.
            "prototype$__count__contactus": {
              url: urlBase + "/FeedBackCategories/:id/contactus/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#create
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FeedBackCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#createMany
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FeedBackCategories",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#patchOrCreate
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/FeedBackCategories",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#replaceOrCreate
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FeedBackCategories/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#upsertWithWhere
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FeedBackCategories/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#exists
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FeedBackCategories/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#findById
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FeedBackCategories/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#replaceById
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FeedBackCategories/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#find
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FeedBackCategories",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#findOne
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FeedBackCategories/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#updateAll
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FeedBackCategories/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#deleteById
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FeedBackCategories/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#count
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FeedBackCategories/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#prototype$patchAttributes
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeedBackCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/FeedBackCategories/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#createChangeStream
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FeedBackCategories/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#getFeedBackCategory
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * getFeedBackCategory
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getFeedBackCategory": {
              url: urlBase + "/FeedBackCategories/getFeedBackCategory",
              method: "GET",
            },

            // INTERNAL. Use Contactus.feedBackCategory() instead.
            "::get::Contactus::feedBackCategory": {
              url: urlBase + "/Contactus/:id/feedBackCategory",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#upsert
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#updateOrCreate
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#patchOrCreateWithWhere
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#update
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#destroyById
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#removeById
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#updateAttributes
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeedBackCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FeedBackCategory` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FeedBackCategory#modelName
        * @propertyOf lbServices.FeedBackCategory
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FeedBackCategory`.
        */
        R.modelName = "FeedBackCategory";

    /**
     * @ngdoc object
     * @name lbServices.FeedBackCategory.contactus
     * @header lbServices.FeedBackCategory.contactus
     * @object
     * @description
     *
     * The object `FeedBackCategory.contactus` groups methods
     * manipulating `Contactus` instances related to `FeedBackCategory`.
     *
     * Call {@link lbServices.FeedBackCategory#contactus FeedBackCategory.contactus()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory#contactus
             * @methodOf lbServices.FeedBackCategory
             *
             * @description
             *
             * Queries contactus of FeedBackCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeedBackCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R.contactus = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::get::FeedBackCategory::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory.contactus#count
             * @methodOf lbServices.FeedBackCategory.contactus
             *
             * @description
             *
             * Counts contactus of FeedBackCategory.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeedBackCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.contactus.count = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::count::FeedBackCategory::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory.contactus#create
             * @methodOf lbServices.FeedBackCategory.contactus
             *
             * @description
             *
             * Creates a new instance in contactus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeedBackCategory id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R.contactus.create = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::create::FeedBackCategory::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory.contactus#createMany
             * @methodOf lbServices.FeedBackCategory.contactus
             *
             * @description
             *
             * Creates a new instance in contactus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeedBackCategory id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R.contactus.createMany = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::createMany::FeedBackCategory::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory.contactus#destroyAll
             * @methodOf lbServices.FeedBackCategory.contactus
             *
             * @description
             *
             * Deletes all contactus of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeedBackCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contactus.destroyAll = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::delete::FeedBackCategory::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory.contactus#destroyById
             * @methodOf lbServices.FeedBackCategory.contactus
             *
             * @description
             *
             * Delete a related item by id for contactus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeedBackCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for contactus
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.contactus.destroyById = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::destroyById::FeedBackCategory::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory.contactus#findById
             * @methodOf lbServices.FeedBackCategory.contactus
             *
             * @description
             *
             * Find a related item by id for contactus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeedBackCategory id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for contactus
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R.contactus.findById = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::findById::FeedBackCategory::contactus"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FeedBackCategory.contactus#updateById
             * @methodOf lbServices.FeedBackCategory.contactus
             *
             * @description
             *
             * Update a related item by id for contactus.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FeedBackCategory id
             *
             *  - `fk` – `{*}` - Foreign key for contactus
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Contactus` object.)
             * </em>
             */
        R.contactus.updateById = function() {
          var TargetResource = $injector.get("Contactus");
          var action = TargetResource["::updateById::FeedBackCategory::contactus"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.PrivateChat
 * @header lbServices.PrivateChat
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PrivateChat` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "PrivateChat",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/PrivateChats/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use PrivateChat.chatList() instead.
            "prototype$__get__chatList": {
              url: urlBase + "/PrivateChats/:id/chatList",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#create
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/PrivateChats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#createMany
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/PrivateChats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#patchOrCreate
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/PrivateChats",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#replaceOrCreate
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/PrivateChats/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#upsertWithWhere
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/PrivateChats/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#exists
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/PrivateChats/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#findById
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/PrivateChats/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#replaceById
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/PrivateChats/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#find
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/PrivateChats",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#findOne
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/PrivateChats/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#updateAll
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/PrivateChats/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#deleteById
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/PrivateChats/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#count
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/PrivateChats/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#prototype$patchAttributes
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PrivateChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/PrivateChats/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#createChangeStream
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/PrivateChats/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#getCustomer
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * get customer
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getCustomer": {
              url: urlBase + "/PrivateChats/getCustomer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#getMsgForCustomer
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * getMsgForCustomer
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getMsgForCustomer": {
              url: urlBase + "/PrivateChats/getMsgForCustomer",
              method: "GET",
            },

            // INTERNAL. Use ChatList.privateChats.findById() instead.
            "::findById::ChatList::privateChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ChatLists/:id/privateChats/:fk",
              method: "GET",
            },

            // INTERNAL. Use ChatList.privateChats.destroyById() instead.
            "::destroyById::ChatList::privateChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ChatLists/:id/privateChats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ChatList.privateChats.updateById() instead.
            "::updateById::ChatList::privateChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ChatLists/:id/privateChats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ChatList.privateChats() instead.
            "::get::ChatList::privateChats": {
              isArray: true,
              url: urlBase + "/ChatLists/:id/privateChats",
              method: "GET",
            },

            // INTERNAL. Use ChatList.privateChats.create() instead.
            "::create::ChatList::privateChats": {
              url: urlBase + "/ChatLists/:id/privateChats",
              method: "POST",
            },

            // INTERNAL. Use ChatList.privateChats.createMany() instead.
            "::createMany::ChatList::privateChats": {
              isArray: true,
              url: urlBase + "/ChatLists/:id/privateChats",
              method: "POST",
            },

            // INTERNAL. Use ChatList.privateChats.destroyAll() instead.
            "::delete::ChatList::privateChats": {
              url: urlBase + "/ChatLists/:id/privateChats",
              method: "DELETE",
            },

            // INTERNAL. Use ChatList.privateChats.count() instead.
            "::count::ChatList::privateChats": {
              url: urlBase + "/ChatLists/:id/privateChats/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#upsert
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#updateOrCreate
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#patchOrCreateWithWhere
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#update
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#destroyById
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#removeById
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#updateAttributes
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PrivateChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.PrivateChat#modelName
        * @propertyOf lbServices.PrivateChat
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PrivateChat`.
        */
        R.modelName = "PrivateChat";


            /**
             * @ngdoc method
             * @name lbServices.PrivateChat#chatList
             * @methodOf lbServices.PrivateChat
             *
             * @description
             *
             * Fetches belongsTo relation chatList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PrivateChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatList = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::get::PrivateChat::chatList"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.CustomerChatList
 * @header lbServices.CustomerChatList
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CustomerChatList` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "CustomerChatList",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/CustomerChatLists/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use CustomerChatList.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/CustomerChatLists/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.chatLists.findById() instead.
            "prototype$__findById__chatLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/chatLists/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.chatLists.destroyById() instead.
            "prototype$__destroyById__chatLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/chatLists/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerChatList.chatLists.updateById() instead.
            "prototype$__updateById__chatLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/chatLists/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerChatList.friendLists.findById() instead.
            "prototype$__findById__friendLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/friendLists/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.friendLists.destroyById() instead.
            "prototype$__destroyById__friendLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/friendLists/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerChatList.friendLists.updateById() instead.
            "prototype$__updateById__friendLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/friendLists/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerChatList.chatLists() instead.
            "prototype$__get__chatLists": {
              isArray: true,
              url: urlBase + "/CustomerChatLists/:id/chatLists",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.chatLists.create() instead.
            "prototype$__create__chatLists": {
              url: urlBase + "/CustomerChatLists/:id/chatLists",
              method: "POST",
            },

            // INTERNAL. Use CustomerChatList.chatLists.destroyAll() instead.
            "prototype$__delete__chatLists": {
              url: urlBase + "/CustomerChatLists/:id/chatLists",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerChatList.chatLists.count() instead.
            "prototype$__count__chatLists": {
              url: urlBase + "/CustomerChatLists/:id/chatLists/count",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.friendLists() instead.
            "prototype$__get__friendLists": {
              isArray: true,
              url: urlBase + "/CustomerChatLists/:id/friendLists",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.friendLists.create() instead.
            "prototype$__create__friendLists": {
              url: urlBase + "/CustomerChatLists/:id/friendLists",
              method: "POST",
            },

            // INTERNAL. Use CustomerChatList.friendLists.destroyAll() instead.
            "prototype$__delete__friendLists": {
              url: urlBase + "/CustomerChatLists/:id/friendLists",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerChatList.friendLists.count() instead.
            "prototype$__count__friendLists": {
              url: urlBase + "/CustomerChatLists/:id/friendLists/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#create
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/CustomerChatLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#createMany
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/CustomerChatLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#patchOrCreate
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/CustomerChatLists",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#replaceOrCreate
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/CustomerChatLists/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#upsertWithWhere
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/CustomerChatLists/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#exists
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/CustomerChatLists/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#findById
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/CustomerChatLists/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#replaceById
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/CustomerChatLists/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#find
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/CustomerChatLists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#findOne
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/CustomerChatLists/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#updateAll
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/CustomerChatLists/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#deleteById
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/CustomerChatLists/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#count
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/CustomerChatLists/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#prototype$patchAttributes
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/CustomerChatLists/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#createChangeStream
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/CustomerChatLists/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#getCustomerChatList
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * getCustomerChatList
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getCustomerChatList": {
              url: urlBase + "/CustomerChatLists/getCustomerChatList",
              method: "GET",
            },

            // INTERNAL. Use Customer.customerChatLists() instead.
            "::get::Customer::customerChatLists": {
              url: urlBase + "/Customers/:id/customerChatLists",
              method: "GET",
            },

            // INTERNAL. Use Customer.customerChatLists.create() instead.
            "::create::Customer::customerChatLists": {
              url: urlBase + "/Customers/:id/customerChatLists",
              method: "POST",
            },

            // INTERNAL. Use Customer.customerChatLists.createMany() instead.
            "::createMany::Customer::customerChatLists": {
              isArray: true,
              url: urlBase + "/Customers/:id/customerChatLists",
              method: "POST",
            },

            // INTERNAL. Use Customer.customerChatLists.update() instead.
            "::update::Customer::customerChatLists": {
              url: urlBase + "/Customers/:id/customerChatLists",
              method: "PUT",
            },

            // INTERNAL. Use Customer.customerChatLists.destroy() instead.
            "::destroy::Customer::customerChatLists": {
              url: urlBase + "/Customers/:id/customerChatLists",
              method: "DELETE",
            },

            // INTERNAL. Use ChatList.customerChatList() instead.
            "::get::ChatList::customerChatList": {
              url: urlBase + "/ChatLists/:id/customerChatList",
              method: "GET",
            },

            // INTERNAL. Use FriendList.customerChatList() instead.
            "::get::FriendList::customerChatList": {
              url: urlBase + "/FriendLists/:id/customerChatList",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#upsert
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#updateOrCreate
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#patchOrCreateWithWhere
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#update
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#destroyById
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#removeById
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#updateAttributes
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.CustomerChatList#modelName
        * @propertyOf lbServices.CustomerChatList
        * @description
        * The name of the model represented by this $resource,
        * i.e. `CustomerChatList`.
        */
        R.modelName = "CustomerChatList";


            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#customer
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::CustomerChatList::customer"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.CustomerChatList.chatLists
     * @header lbServices.CustomerChatList.chatLists
     * @object
     * @description
     *
     * The object `CustomerChatList.chatLists` groups methods
     * manipulating `ChatList` instances related to `CustomerChatList`.
     *
     * Call {@link lbServices.CustomerChatList#chatLists CustomerChatList.chatLists()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#chatLists
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Queries chatLists of CustomerChatList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatLists = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::get::CustomerChatList::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.chatLists#count
             * @methodOf lbServices.CustomerChatList.chatLists
             *
             * @description
             *
             * Counts chatLists of CustomerChatList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.chatLists.count = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::count::CustomerChatList::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.chatLists#create
             * @methodOf lbServices.CustomerChatList.chatLists
             *
             * @description
             *
             * Creates a new instance in chatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatLists.create = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::create::CustomerChatList::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.chatLists#createMany
             * @methodOf lbServices.CustomerChatList.chatLists
             *
             * @description
             *
             * Creates a new instance in chatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatLists.createMany = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::createMany::CustomerChatList::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.chatLists#destroyAll
             * @methodOf lbServices.CustomerChatList.chatLists
             *
             * @description
             *
             * Deletes all chatLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.chatLists.destroyAll = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::delete::CustomerChatList::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.chatLists#destroyById
             * @methodOf lbServices.CustomerChatList.chatLists
             *
             * @description
             *
             * Delete a related item by id for chatLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for chatLists
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.chatLists.destroyById = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::destroyById::CustomerChatList::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.chatLists#findById
             * @methodOf lbServices.CustomerChatList.chatLists
             *
             * @description
             *
             * Find a related item by id for chatLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for chatLists
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatLists.findById = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::findById::CustomerChatList::chatLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.chatLists#updateById
             * @methodOf lbServices.CustomerChatList.chatLists
             *
             * @description
             *
             * Update a related item by id for chatLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `fk` – `{*}` - Foreign key for chatLists
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatLists.updateById = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::updateById::CustomerChatList::chatLists"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.CustomerChatList.friendLists
     * @header lbServices.CustomerChatList.friendLists
     * @object
     * @description
     *
     * The object `CustomerChatList.friendLists` groups methods
     * manipulating `FriendList` instances related to `CustomerChatList`.
     *
     * Call {@link lbServices.CustomerChatList#friendLists CustomerChatList.friendLists()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList#friendLists
             * @methodOf lbServices.CustomerChatList
             *
             * @description
             *
             * Queries friendLists of CustomerChatList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::get::CustomerChatList::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.friendLists#count
             * @methodOf lbServices.CustomerChatList.friendLists
             *
             * @description
             *
             * Counts friendLists of CustomerChatList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.friendLists.count = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::count::CustomerChatList::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.friendLists#create
             * @methodOf lbServices.CustomerChatList.friendLists
             *
             * @description
             *
             * Creates a new instance in friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists.create = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::create::CustomerChatList::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.friendLists#createMany
             * @methodOf lbServices.CustomerChatList.friendLists
             *
             * @description
             *
             * Creates a new instance in friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists.createMany = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::createMany::CustomerChatList::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.friendLists#destroyAll
             * @methodOf lbServices.CustomerChatList.friendLists
             *
             * @description
             *
             * Deletes all friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.friendLists.destroyAll = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::delete::CustomerChatList::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.friendLists#destroyById
             * @methodOf lbServices.CustomerChatList.friendLists
             *
             * @description
             *
             * Delete a related item by id for friendLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for friendLists
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.friendLists.destroyById = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::destroyById::CustomerChatList::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.friendLists#findById
             * @methodOf lbServices.CustomerChatList.friendLists
             *
             * @description
             *
             * Find a related item by id for friendLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for friendLists
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists.findById = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::findById::CustomerChatList::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.CustomerChatList.friendLists#updateById
             * @methodOf lbServices.CustomerChatList.friendLists
             *
             * @description
             *
             * Update a related item by id for friendLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - CustomerChatList id
             *
             *  - `fk` – `{*}` - Foreign key for friendLists
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists.updateById = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::updateById::CustomerChatList::friendLists"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ChatList
 * @header lbServices.ChatList
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ChatList` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ChatList",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ChatLists/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ChatList.customerChatList() instead.
            "prototype$__get__customerChatList": {
              url: urlBase + "/ChatLists/:id/customerChatList",
              method: "GET",
            },

            // INTERNAL. Use ChatList.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/ChatLists/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use ChatList.privateChats.findById() instead.
            "prototype$__findById__privateChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ChatLists/:id/privateChats/:fk",
              method: "GET",
            },

            // INTERNAL. Use ChatList.privateChats.destroyById() instead.
            "prototype$__destroyById__privateChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ChatLists/:id/privateChats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use ChatList.privateChats.updateById() instead.
            "prototype$__updateById__privateChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/ChatLists/:id/privateChats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use ChatList.groups() instead.
            "prototype$__get__groups": {
              url: urlBase + "/ChatLists/:id/groups",
              method: "GET",
            },

            // INTERNAL. Use ChatList.privateChats() instead.
            "prototype$__get__privateChats": {
              isArray: true,
              url: urlBase + "/ChatLists/:id/privateChats",
              method: "GET",
            },

            // INTERNAL. Use ChatList.privateChats.create() instead.
            "prototype$__create__privateChats": {
              url: urlBase + "/ChatLists/:id/privateChats",
              method: "POST",
            },

            // INTERNAL. Use ChatList.privateChats.destroyAll() instead.
            "prototype$__delete__privateChats": {
              url: urlBase + "/ChatLists/:id/privateChats",
              method: "DELETE",
            },

            // INTERNAL. Use ChatList.privateChats.count() instead.
            "prototype$__count__privateChats": {
              url: urlBase + "/ChatLists/:id/privateChats/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#create
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ChatLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#createMany
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ChatLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#patchOrCreate
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/ChatLists",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#replaceOrCreate
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ChatLists/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#upsertWithWhere
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ChatLists/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#exists
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ChatLists/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#findById
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ChatLists/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#replaceById
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ChatLists/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#find
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ChatLists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#findOne
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ChatLists/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#updateAll
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ChatLists/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#deleteById
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ChatLists/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#count
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ChatLists/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#prototype$patchAttributes
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/ChatLists/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ChatList#createChangeStream
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ChatLists/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Customer.chatLists() instead.
            "::get::Customer::chatLists": {
              url: urlBase + "/Customers/:id/chatLists",
              method: "GET",
            },

            // INTERNAL. Use Customer.chatLists.create() instead.
            "::create::Customer::chatLists": {
              url: urlBase + "/Customers/:id/chatLists",
              method: "POST",
            },

            // INTERNAL. Use Customer.chatLists.createMany() instead.
            "::createMany::Customer::chatLists": {
              isArray: true,
              url: urlBase + "/Customers/:id/chatLists",
              method: "POST",
            },

            // INTERNAL. Use Customer.chatLists.update() instead.
            "::update::Customer::chatLists": {
              url: urlBase + "/Customers/:id/chatLists",
              method: "PUT",
            },

            // INTERNAL. Use Customer.chatLists.destroy() instead.
            "::destroy::Customer::chatLists": {
              url: urlBase + "/Customers/:id/chatLists",
              method: "DELETE",
            },

            // INTERNAL. Use PrivateChat.chatList() instead.
            "::get::PrivateChat::chatList": {
              url: urlBase + "/PrivateChats/:id/chatList",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.chatLists.findById() instead.
            "::findById::CustomerChatList::chatLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/chatLists/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.chatLists.destroyById() instead.
            "::destroyById::CustomerChatList::chatLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/chatLists/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerChatList.chatLists.updateById() instead.
            "::updateById::CustomerChatList::chatLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/chatLists/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerChatList.chatLists() instead.
            "::get::CustomerChatList::chatLists": {
              isArray: true,
              url: urlBase + "/CustomerChatLists/:id/chatLists",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.chatLists.create() instead.
            "::create::CustomerChatList::chatLists": {
              url: urlBase + "/CustomerChatLists/:id/chatLists",
              method: "POST",
            },

            // INTERNAL. Use CustomerChatList.chatLists.createMany() instead.
            "::createMany::CustomerChatList::chatLists": {
              isArray: true,
              url: urlBase + "/CustomerChatLists/:id/chatLists",
              method: "POST",
            },

            // INTERNAL. Use CustomerChatList.chatLists.destroyAll() instead.
            "::delete::CustomerChatList::chatLists": {
              url: urlBase + "/CustomerChatLists/:id/chatLists",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerChatList.chatLists.count() instead.
            "::count::CustomerChatList::chatLists": {
              url: urlBase + "/CustomerChatLists/:id/chatLists/count",
              method: "GET",
            },

            // INTERNAL. Use Groups.chatList() instead.
            "::get::Groups::chatList": {
              url: urlBase + "/Groups/:id/chatList",
              method: "GET",
            },

            // INTERNAL. Use Groups.chatList.create() instead.
            "::create::Groups::chatList": {
              url: urlBase + "/Groups/:id/chatList",
              method: "POST",
            },

            // INTERNAL. Use Groups.chatList.createMany() instead.
            "::createMany::Groups::chatList": {
              isArray: true,
              url: urlBase + "/Groups/:id/chatList",
              method: "POST",
            },

            // INTERNAL. Use Groups.chatList.update() instead.
            "::update::Groups::chatList": {
              url: urlBase + "/Groups/:id/chatList",
              method: "PUT",
            },

            // INTERNAL. Use Groups.chatList.destroy() instead.
            "::destroy::Groups::chatList": {
              url: urlBase + "/Groups/:id/chatList",
              method: "DELETE",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ChatList#upsert
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ChatList#updateOrCreate
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ChatList#patchOrCreateWithWhere
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ChatList#update
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ChatList#destroyById
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ChatList#removeById
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ChatList#updateAttributes
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ChatList#modelName
        * @propertyOf lbServices.ChatList
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ChatList`.
        */
        R.modelName = "ChatList";


            /**
             * @ngdoc method
             * @name lbServices.ChatList#customerChatList
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Fetches belongsTo relation customerChatList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R.customerChatList = function() {
          var TargetResource = $injector.get("CustomerChatList");
          var action = TargetResource["::get::ChatList::customerChatList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ChatList#customer
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::ChatList::customer"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.ChatList.privateChats
     * @header lbServices.ChatList.privateChats
     * @object
     * @description
     *
     * The object `ChatList.privateChats` groups methods
     * manipulating `PrivateChat` instances related to `ChatList`.
     *
     * Call {@link lbServices.ChatList#privateChats ChatList.privateChats()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.ChatList#privateChats
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Queries privateChats of ChatList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R.privateChats = function() {
          var TargetResource = $injector.get("PrivateChat");
          var action = TargetResource["::get::ChatList::privateChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ChatList.privateChats#count
             * @methodOf lbServices.ChatList.privateChats
             *
             * @description
             *
             * Counts privateChats of ChatList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.privateChats.count = function() {
          var TargetResource = $injector.get("PrivateChat");
          var action = TargetResource["::count::ChatList::privateChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ChatList.privateChats#create
             * @methodOf lbServices.ChatList.privateChats
             *
             * @description
             *
             * Creates a new instance in privateChats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R.privateChats.create = function() {
          var TargetResource = $injector.get("PrivateChat");
          var action = TargetResource["::create::ChatList::privateChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ChatList.privateChats#createMany
             * @methodOf lbServices.ChatList.privateChats
             *
             * @description
             *
             * Creates a new instance in privateChats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R.privateChats.createMany = function() {
          var TargetResource = $injector.get("PrivateChat");
          var action = TargetResource["::createMany::ChatList::privateChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ChatList.privateChats#destroyAll
             * @methodOf lbServices.ChatList.privateChats
             *
             * @description
             *
             * Deletes all privateChats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.privateChats.destroyAll = function() {
          var TargetResource = $injector.get("PrivateChat");
          var action = TargetResource["::delete::ChatList::privateChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ChatList.privateChats#destroyById
             * @methodOf lbServices.ChatList.privateChats
             *
             * @description
             *
             * Delete a related item by id for privateChats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for privateChats
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.privateChats.destroyById = function() {
          var TargetResource = $injector.get("PrivateChat");
          var action = TargetResource["::destroyById::ChatList::privateChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ChatList.privateChats#findById
             * @methodOf lbServices.ChatList.privateChats
             *
             * @description
             *
             * Find a related item by id for privateChats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for privateChats
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R.privateChats.findById = function() {
          var TargetResource = $injector.get("PrivateChat");
          var action = TargetResource["::findById::ChatList::privateChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ChatList.privateChats#updateById
             * @methodOf lbServices.ChatList.privateChats
             *
             * @description
             *
             * Update a related item by id for privateChats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `fk` – `{*}` - Foreign key for privateChats
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateChat` object.)
             * </em>
             */
        R.privateChats.updateById = function() {
          var TargetResource = $injector.get("PrivateChat");
          var action = TargetResource["::updateById::ChatList::privateChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ChatList#groups
             * @methodOf lbServices.ChatList
             *
             * @description
             *
             * Fetches belongsTo relation groups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ChatList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
        R.groups = function() {
          var TargetResource = $injector.get("Groups");
          var action = TargetResource["::get::ChatList::groups"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Groups
 * @header lbServices.Groups
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Groups` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Groups",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Groups/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Groups.chatList() instead.
            "prototype$__get__chatList": {
              url: urlBase + "/Groups/:id/chatList",
              method: "GET",
            },

            // INTERNAL. Use Groups.chatList.create() instead.
            "prototype$__create__chatList": {
              url: urlBase + "/Groups/:id/chatList",
              method: "POST",
            },

            // INTERNAL. Use Groups.chatList.update() instead.
            "prototype$__update__chatList": {
              url: urlBase + "/Groups/:id/chatList",
              method: "PUT",
            },

            // INTERNAL. Use Groups.chatList.destroy() instead.
            "prototype$__destroy__chatList": {
              url: urlBase + "/Groups/:id/chatList",
              method: "DELETE",
            },

            // INTERNAL. Use Groups.groupContacts.findById() instead.
            "prototype$__findById__groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupContacts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupContacts.destroyById() instead.
            "prototype$__destroyById__groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupContacts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Groups.groupContacts.updateById() instead.
            "prototype$__updateById__groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupContacts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Groups.groupChats.findById() instead.
            "prototype$__findById__groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupChats/:fk",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupChats.destroyById() instead.
            "prototype$__destroyById__groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupChats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Groups.groupChats.updateById() instead.
            "prototype$__updateById__groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupChats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Groups.groupContacts() instead.
            "prototype$__get__groupContacts": {
              isArray: true,
              url: urlBase + "/Groups/:id/groupContacts",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupContacts.create() instead.
            "prototype$__create__groupContacts": {
              url: urlBase + "/Groups/:id/groupContacts",
              method: "POST",
            },

            // INTERNAL. Use Groups.groupContacts.destroyAll() instead.
            "prototype$__delete__groupContacts": {
              url: urlBase + "/Groups/:id/groupContacts",
              method: "DELETE",
            },

            // INTERNAL. Use Groups.groupContacts.count() instead.
            "prototype$__count__groupContacts": {
              url: urlBase + "/Groups/:id/groupContacts/count",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupChats() instead.
            "prototype$__get__groupChats": {
              isArray: true,
              url: urlBase + "/Groups/:id/groupChats",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupChats.create() instead.
            "prototype$__create__groupChats": {
              url: urlBase + "/Groups/:id/groupChats",
              method: "POST",
            },

            // INTERNAL. Use Groups.groupChats.destroyAll() instead.
            "prototype$__delete__groupChats": {
              url: urlBase + "/Groups/:id/groupChats",
              method: "DELETE",
            },

            // INTERNAL. Use Groups.groupChats.count() instead.
            "prototype$__count__groupChats": {
              url: urlBase + "/Groups/:id/groupChats/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#create
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Groups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#createMany
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Groups",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#patchOrCreate
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Groups",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#replaceOrCreate
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Groups/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#upsertWithWhere
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Groups/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#exists
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Groups/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#findById
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Groups/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#replaceById
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Groups/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#find
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Groups",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#findOne
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Groups/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#updateAll
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Groups/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#deleteById
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Groups/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#count
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Groups/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#prototype$patchAttributes
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Groups/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#createChangeStream
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Groups/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#getGroups
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * get groups Api
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getGroups": {
              url: urlBase + "/Groups/getGroups",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Groups#createAndUpdate
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * create And Update the api
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "createAndUpdate": {
              url: urlBase + "/Groups/createAndUpdate",
              method: "POST",
            },

            // INTERNAL. Use ChatList.groups() instead.
            "::get::ChatList::groups": {
              url: urlBase + "/ChatLists/:id/groups",
              method: "GET",
            },

            // INTERNAL. Use GroupContact.groups() instead.
            "::get::GroupContact::groups": {
              url: urlBase + "/GroupContacts/:id/groups",
              method: "GET",
            },

            // INTERNAL. Use GroupChat.groups() instead.
            "::get::GroupChat::groups": {
              url: urlBase + "/GroupChats/:id/groups",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Groups#upsert
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Groups#updateOrCreate
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Groups#patchOrCreateWithWhere
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Groups#update
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Groups#destroyById
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Groups#removeById
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Groups#updateAttributes
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Groups#modelName
        * @propertyOf lbServices.Groups
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Groups`.
        */
        R.modelName = "Groups";

    /**
     * @ngdoc object
     * @name lbServices.Groups.chatList
     * @header lbServices.Groups.chatList
     * @object
     * @description
     *
     * The object `Groups.chatList` groups methods
     * manipulating `ChatList` instances related to `Groups`.
     *
     * Call {@link lbServices.Groups#chatList Groups.chatList()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Groups#chatList
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Fetches hasOne relation chatList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatList = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::get::Groups::chatList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.chatList#create
             * @methodOf lbServices.Groups.chatList
             *
             * @description
             *
             * Creates a new instance in chatList of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatList.create = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::create::Groups::chatList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.chatList#createMany
             * @methodOf lbServices.Groups.chatList
             *
             * @description
             *
             * Creates a new instance in chatList of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatList.createMany = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::createMany::Groups::chatList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.chatList#destroy
             * @methodOf lbServices.Groups.chatList
             *
             * @description
             *
             * Deletes chatList of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.chatList.destroy = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::destroy::Groups::chatList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.chatList#update
             * @methodOf lbServices.Groups.chatList
             *
             * @description
             *
             * Update chatList of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ChatList` object.)
             * </em>
             */
        R.chatList.update = function() {
          var TargetResource = $injector.get("ChatList");
          var action = TargetResource["::update::Groups::chatList"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Groups.groupContacts
     * @header lbServices.Groups.groupContacts
     * @object
     * @description
     *
     * The object `Groups.groupContacts` groups methods
     * manipulating `GroupContact` instances related to `Groups`.
     *
     * Call {@link lbServices.Groups#groupContacts Groups.groupContacts()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Groups#groupContacts
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Queries groupContacts of Groups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R.groupContacts = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::get::Groups::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupContacts#count
             * @methodOf lbServices.Groups.groupContacts
             *
             * @description
             *
             * Counts groupContacts of Groups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.groupContacts.count = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::count::Groups::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupContacts#create
             * @methodOf lbServices.Groups.groupContacts
             *
             * @description
             *
             * Creates a new instance in groupContacts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R.groupContacts.create = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::create::Groups::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupContacts#createMany
             * @methodOf lbServices.Groups.groupContacts
             *
             * @description
             *
             * Creates a new instance in groupContacts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R.groupContacts.createMany = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::createMany::Groups::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupContacts#destroyAll
             * @methodOf lbServices.Groups.groupContacts
             *
             * @description
             *
             * Deletes all groupContacts of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.groupContacts.destroyAll = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::delete::Groups::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupContacts#destroyById
             * @methodOf lbServices.Groups.groupContacts
             *
             * @description
             *
             * Delete a related item by id for groupContacts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for groupContacts
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.groupContacts.destroyById = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::destroyById::Groups::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupContacts#findById
             * @methodOf lbServices.Groups.groupContacts
             *
             * @description
             *
             * Find a related item by id for groupContacts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for groupContacts
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R.groupContacts.findById = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::findById::Groups::groupContacts"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupContacts#updateById
             * @methodOf lbServices.Groups.groupContacts
             *
             * @description
             *
             * Update a related item by id for groupContacts.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `fk` – `{*}` - Foreign key for groupContacts
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R.groupContacts.updateById = function() {
          var TargetResource = $injector.get("GroupContact");
          var action = TargetResource["::updateById::Groups::groupContacts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Groups.groupChats
     * @header lbServices.Groups.groupChats
     * @object
     * @description
     *
     * The object `Groups.groupChats` groups methods
     * manipulating `GroupChat` instances related to `Groups`.
     *
     * Call {@link lbServices.Groups#groupChats Groups.groupChats()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Groups#groupChats
             * @methodOf lbServices.Groups
             *
             * @description
             *
             * Queries groupChats of Groups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChats = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::get::Groups::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupChats#count
             * @methodOf lbServices.Groups.groupChats
             *
             * @description
             *
             * Counts groupChats of Groups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.groupChats.count = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::count::Groups::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupChats#create
             * @methodOf lbServices.Groups.groupChats
             *
             * @description
             *
             * Creates a new instance in groupChats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChats.create = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::create::Groups::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupChats#createMany
             * @methodOf lbServices.Groups.groupChats
             *
             * @description
             *
             * Creates a new instance in groupChats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChats.createMany = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::createMany::Groups::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupChats#destroyAll
             * @methodOf lbServices.Groups.groupChats
             *
             * @description
             *
             * Deletes all groupChats of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.groupChats.destroyAll = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::delete::Groups::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupChats#destroyById
             * @methodOf lbServices.Groups.groupChats
             *
             * @description
             *
             * Delete a related item by id for groupChats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for groupChats
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.groupChats.destroyById = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::destroyById::Groups::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupChats#findById
             * @methodOf lbServices.Groups.groupChats
             *
             * @description
             *
             * Find a related item by id for groupChats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for groupChats
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChats.findById = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::findById::Groups::groupChats"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Groups.groupChats#updateById
             * @methodOf lbServices.Groups.groupChats
             *
             * @description
             *
             * Update a related item by id for groupChats.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Groups id
             *
             *  - `fk` – `{*}` - Foreign key for groupChats
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChats.updateById = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::updateById::Groups::groupChats"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.GroupContact
 * @header lbServices.GroupContact
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `GroupContact` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "GroupContact",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/GroupContacts/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use GroupContact.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/GroupContacts/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use GroupContact.groups() instead.
            "prototype$__get__groups": {
              url: urlBase + "/GroupContacts/:id/groups",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#create
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/GroupContacts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#createMany
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/GroupContacts",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#patchOrCreate
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/GroupContacts",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#replaceOrCreate
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/GroupContacts/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#upsertWithWhere
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/GroupContacts/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#exists
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/GroupContacts/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#findById
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/GroupContacts/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#replaceById
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/GroupContacts/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#find
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/GroupContacts",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#findOne
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/GroupContacts/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#updateAll
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/GroupContacts/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#deleteById
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/GroupContacts/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#count
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/GroupContacts/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#prototype$patchAttributes
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupContact id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/GroupContacts/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#createChangeStream
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/GroupContacts/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#removeGroupUser
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * remove group user
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "removeGroupUser": {
              url: urlBase + "/GroupContacts/removeGroupUser",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#addNewCustomer
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Add new customer
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "addNewCustomer": {
              url: urlBase + "/GroupContacts/addNewCustomer",
              method: "POST",
            },

            // INTERNAL. Use Customer.groupContacts.findById() instead.
            "::findById::Customer::groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupContacts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupContacts.destroyById() instead.
            "::destroyById::Customer::groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupContacts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.groupContacts.updateById() instead.
            "::updateById::Customer::groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupContacts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.groupContacts() instead.
            "::get::Customer::groupContacts": {
              isArray: true,
              url: urlBase + "/Customers/:id/groupContacts",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupContacts.create() instead.
            "::create::Customer::groupContacts": {
              url: urlBase + "/Customers/:id/groupContacts",
              method: "POST",
            },

            // INTERNAL. Use Customer.groupContacts.createMany() instead.
            "::createMany::Customer::groupContacts": {
              isArray: true,
              url: urlBase + "/Customers/:id/groupContacts",
              method: "POST",
            },

            // INTERNAL. Use Customer.groupContacts.destroyAll() instead.
            "::delete::Customer::groupContacts": {
              url: urlBase + "/Customers/:id/groupContacts",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.groupContacts.count() instead.
            "::count::Customer::groupContacts": {
              url: urlBase + "/Customers/:id/groupContacts/count",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupContacts.findById() instead.
            "::findById::Groups::groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupContacts/:fk",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupContacts.destroyById() instead.
            "::destroyById::Groups::groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupContacts/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Groups.groupContacts.updateById() instead.
            "::updateById::Groups::groupContacts": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupContacts/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Groups.groupContacts() instead.
            "::get::Groups::groupContacts": {
              isArray: true,
              url: urlBase + "/Groups/:id/groupContacts",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupContacts.create() instead.
            "::create::Groups::groupContacts": {
              url: urlBase + "/Groups/:id/groupContacts",
              method: "POST",
            },

            // INTERNAL. Use Groups.groupContacts.createMany() instead.
            "::createMany::Groups::groupContacts": {
              isArray: true,
              url: urlBase + "/Groups/:id/groupContacts",
              method: "POST",
            },

            // INTERNAL. Use Groups.groupContacts.destroyAll() instead.
            "::delete::Groups::groupContacts": {
              url: urlBase + "/Groups/:id/groupContacts",
              method: "DELETE",
            },

            // INTERNAL. Use Groups.groupContacts.count() instead.
            "::count::Groups::groupContacts": {
              url: urlBase + "/Groups/:id/groupContacts/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.GroupContact#upsert
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#updateOrCreate
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#patchOrCreateWithWhere
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#update
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#destroyById
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#removeById
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#updateAttributes
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupContact id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupContact` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.GroupContact#modelName
        * @propertyOf lbServices.GroupContact
        * @description
        * The name of the model represented by this $resource,
        * i.e. `GroupContact`.
        */
        R.modelName = "GroupContact";


            /**
             * @ngdoc method
             * @name lbServices.GroupContact#customer
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupContact id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::GroupContact::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.GroupContact#groups
             * @methodOf lbServices.GroupContact
             *
             * @description
             *
             * Fetches belongsTo relation groups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupContact id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
        R.groups = function() {
          var TargetResource = $injector.get("Groups");
          var action = TargetResource["::get::GroupContact::groups"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.GroupChat
 * @header lbServices.GroupChat
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `GroupChat` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "GroupChat",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/GroupChats/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use GroupChat.groups() instead.
            "prototype$__get__groups": {
              url: urlBase + "/GroupChats/:id/groups",
              method: "GET",
            },

            // INTERNAL. Use GroupChat.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/GroupChats/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.findById() instead.
            "prototype$__findById__readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/GroupChats/:id/readedOfMsgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.destroyById() instead.
            "prototype$__destroyById__readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/GroupChats/:id/readedOfMsgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.updateById() instead.
            "prototype$__updateById__readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/GroupChats/:id/readedOfMsgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs() instead.
            "prototype$__get__readedOfMsgs": {
              isArray: true,
              url: urlBase + "/GroupChats/:id/readedOfMsgs",
              method: "GET",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.create() instead.
            "prototype$__create__readedOfMsgs": {
              url: urlBase + "/GroupChats/:id/readedOfMsgs",
              method: "POST",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.destroyAll() instead.
            "prototype$__delete__readedOfMsgs": {
              url: urlBase + "/GroupChats/:id/readedOfMsgs",
              method: "DELETE",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.count() instead.
            "prototype$__count__readedOfMsgs": {
              url: urlBase + "/GroupChats/:id/readedOfMsgs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#create
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/GroupChats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#createMany
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/GroupChats",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#patchOrCreate
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/GroupChats",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#replaceOrCreate
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/GroupChats/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#upsertWithWhere
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/GroupChats/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#exists
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/GroupChats/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#findById
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/GroupChats/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#replaceById
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/GroupChats/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#find
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/GroupChats",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#findOne
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/GroupChats/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#updateAll
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/GroupChats/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#deleteById
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/GroupChats/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#count
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/GroupChats/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#prototype$patchAttributes
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/GroupChats/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#createChangeStream
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/GroupChats/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#getGroupMsg
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Get group message
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getGroupMsg": {
              url: urlBase + "/GroupChats/getGroupMsg",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupChats.findById() instead.
            "::findById::Customer::groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupChats/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupChats.destroyById() instead.
            "::destroyById::Customer::groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupChats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.groupChats.updateById() instead.
            "::updateById::Customer::groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/groupChats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.groupChats() instead.
            "::get::Customer::groupChats": {
              isArray: true,
              url: urlBase + "/Customers/:id/groupChats",
              method: "GET",
            },

            // INTERNAL. Use Customer.groupChats.create() instead.
            "::create::Customer::groupChats": {
              url: urlBase + "/Customers/:id/groupChats",
              method: "POST",
            },

            // INTERNAL. Use Customer.groupChats.createMany() instead.
            "::createMany::Customer::groupChats": {
              isArray: true,
              url: urlBase + "/Customers/:id/groupChats",
              method: "POST",
            },

            // INTERNAL. Use Customer.groupChats.destroyAll() instead.
            "::delete::Customer::groupChats": {
              url: urlBase + "/Customers/:id/groupChats",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.groupChats.count() instead.
            "::count::Customer::groupChats": {
              url: urlBase + "/Customers/:id/groupChats/count",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupChats.findById() instead.
            "::findById::Groups::groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupChats/:fk",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupChats.destroyById() instead.
            "::destroyById::Groups::groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupChats/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Groups.groupChats.updateById() instead.
            "::updateById::Groups::groupChats": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Groups/:id/groupChats/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Groups.groupChats() instead.
            "::get::Groups::groupChats": {
              isArray: true,
              url: urlBase + "/Groups/:id/groupChats",
              method: "GET",
            },

            // INTERNAL. Use Groups.groupChats.create() instead.
            "::create::Groups::groupChats": {
              url: urlBase + "/Groups/:id/groupChats",
              method: "POST",
            },

            // INTERNAL. Use Groups.groupChats.createMany() instead.
            "::createMany::Groups::groupChats": {
              isArray: true,
              url: urlBase + "/Groups/:id/groupChats",
              method: "POST",
            },

            // INTERNAL. Use Groups.groupChats.destroyAll() instead.
            "::delete::Groups::groupChats": {
              url: urlBase + "/Groups/:id/groupChats",
              method: "DELETE",
            },

            // INTERNAL. Use Groups.groupChats.count() instead.
            "::count::Groups::groupChats": {
              url: urlBase + "/Groups/:id/groupChats/count",
              method: "GET",
            },

            // INTERNAL. Use ReadedOfMsg.groupChat() instead.
            "::get::ReadedOfMsg::groupChat": {
              url: urlBase + "/ReadedOfMsgs/:id/groupChat",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.GroupChat#upsert
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#updateOrCreate
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#patchOrCreateWithWhere
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#update
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#destroyById
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#removeById
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#updateAttributes
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.GroupChat#modelName
        * @propertyOf lbServices.GroupChat
        * @description
        * The name of the model represented by this $resource,
        * i.e. `GroupChat`.
        */
        R.modelName = "GroupChat";


            /**
             * @ngdoc method
             * @name lbServices.GroupChat#groups
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Fetches belongsTo relation groups.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Groups` object.)
             * </em>
             */
        R.groups = function() {
          var TargetResource = $injector.get("Groups");
          var action = TargetResource["::get::GroupChat::groups"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.GroupChat#customer
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::GroupChat::customer"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.GroupChat.readedOfMsgs
     * @header lbServices.GroupChat.readedOfMsgs
     * @object
     * @description
     *
     * The object `GroupChat.readedOfMsgs` groups methods
     * manipulating `ReadedOfMsg` instances related to `GroupChat`.
     *
     * Call {@link lbServices.GroupChat#readedOfMsgs GroupChat.readedOfMsgs()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.GroupChat#readedOfMsgs
             * @methodOf lbServices.GroupChat
             *
             * @description
             *
             * Queries readedOfMsgs of GroupChat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R.readedOfMsgs = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::get::GroupChat::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.GroupChat.readedOfMsgs#count
             * @methodOf lbServices.GroupChat.readedOfMsgs
             *
             * @description
             *
             * Counts readedOfMsgs of GroupChat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.readedOfMsgs.count = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::count::GroupChat::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.GroupChat.readedOfMsgs#create
             * @methodOf lbServices.GroupChat.readedOfMsgs
             *
             * @description
             *
             * Creates a new instance in readedOfMsgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R.readedOfMsgs.create = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::create::GroupChat::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.GroupChat.readedOfMsgs#createMany
             * @methodOf lbServices.GroupChat.readedOfMsgs
             *
             * @description
             *
             * Creates a new instance in readedOfMsgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R.readedOfMsgs.createMany = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::createMany::GroupChat::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.GroupChat.readedOfMsgs#destroyAll
             * @methodOf lbServices.GroupChat.readedOfMsgs
             *
             * @description
             *
             * Deletes all readedOfMsgs of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.readedOfMsgs.destroyAll = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::delete::GroupChat::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.GroupChat.readedOfMsgs#destroyById
             * @methodOf lbServices.GroupChat.readedOfMsgs
             *
             * @description
             *
             * Delete a related item by id for readedOfMsgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for readedOfMsgs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.readedOfMsgs.destroyById = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::destroyById::GroupChat::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.GroupChat.readedOfMsgs#findById
             * @methodOf lbServices.GroupChat.readedOfMsgs
             *
             * @description
             *
             * Find a related item by id for readedOfMsgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for readedOfMsgs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R.readedOfMsgs.findById = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::findById::GroupChat::readedOfMsgs"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.GroupChat.readedOfMsgs#updateById
             * @methodOf lbServices.GroupChat.readedOfMsgs
             *
             * @description
             *
             * Update a related item by id for readedOfMsgs.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - GroupChat id
             *
             *  - `fk` – `{*}` - Foreign key for readedOfMsgs
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R.readedOfMsgs.updateById = function() {
          var TargetResource = $injector.get("ReadedOfMsg");
          var action = TargetResource["::updateById::GroupChat::readedOfMsgs"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.ReadedOfMsg
 * @header lbServices.ReadedOfMsg
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `ReadedOfMsg` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "ReadedOfMsg",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/ReadedOfMsgs/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use ReadedOfMsg.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/ReadedOfMsgs/:id/customer",
              method: "GET",
            },

            // INTERNAL. Use ReadedOfMsg.groupChat() instead.
            "prototype$__get__groupChat": {
              url: urlBase + "/ReadedOfMsgs/:id/groupChat",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#create
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/ReadedOfMsgs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#createMany
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/ReadedOfMsgs",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#patchOrCreate
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/ReadedOfMsgs",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#replaceOrCreate
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/ReadedOfMsgs/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#upsertWithWhere
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/ReadedOfMsgs/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#exists
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/ReadedOfMsgs/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#findById
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/ReadedOfMsgs/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#replaceById
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/ReadedOfMsgs/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#find
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/ReadedOfMsgs",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#findOne
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/ReadedOfMsgs/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#updateAll
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/ReadedOfMsgs/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#deleteById
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/ReadedOfMsgs/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#count
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/ReadedOfMsgs/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#prototype$patchAttributes
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ReadedOfMsg id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/ReadedOfMsgs/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#createChangeStream
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/ReadedOfMsgs/change-stream",
              method: "POST",
            },

            // INTERNAL. Use Customer.readedOfMsgs.findById() instead.
            "::findById::Customer::readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/readedOfMsgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.readedOfMsgs.destroyById() instead.
            "::destroyById::Customer::readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/readedOfMsgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.readedOfMsgs.updateById() instead.
            "::updateById::Customer::readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/readedOfMsgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.readedOfMsgs() instead.
            "::get::Customer::readedOfMsgs": {
              isArray: true,
              url: urlBase + "/Customers/:id/readedOfMsgs",
              method: "GET",
            },

            // INTERNAL. Use Customer.readedOfMsgs.create() instead.
            "::create::Customer::readedOfMsgs": {
              url: urlBase + "/Customers/:id/readedOfMsgs",
              method: "POST",
            },

            // INTERNAL. Use Customer.readedOfMsgs.createMany() instead.
            "::createMany::Customer::readedOfMsgs": {
              isArray: true,
              url: urlBase + "/Customers/:id/readedOfMsgs",
              method: "POST",
            },

            // INTERNAL. Use Customer.readedOfMsgs.destroyAll() instead.
            "::delete::Customer::readedOfMsgs": {
              url: urlBase + "/Customers/:id/readedOfMsgs",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.readedOfMsgs.count() instead.
            "::count::Customer::readedOfMsgs": {
              url: urlBase + "/Customers/:id/readedOfMsgs/count",
              method: "GET",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.findById() instead.
            "::findById::GroupChat::readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/GroupChats/:id/readedOfMsgs/:fk",
              method: "GET",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.destroyById() instead.
            "::destroyById::GroupChat::readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/GroupChats/:id/readedOfMsgs/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.updateById() instead.
            "::updateById::GroupChat::readedOfMsgs": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/GroupChats/:id/readedOfMsgs/:fk",
              method: "PUT",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs() instead.
            "::get::GroupChat::readedOfMsgs": {
              isArray: true,
              url: urlBase + "/GroupChats/:id/readedOfMsgs",
              method: "GET",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.create() instead.
            "::create::GroupChat::readedOfMsgs": {
              url: urlBase + "/GroupChats/:id/readedOfMsgs",
              method: "POST",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.createMany() instead.
            "::createMany::GroupChat::readedOfMsgs": {
              isArray: true,
              url: urlBase + "/GroupChats/:id/readedOfMsgs",
              method: "POST",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.destroyAll() instead.
            "::delete::GroupChat::readedOfMsgs": {
              url: urlBase + "/GroupChats/:id/readedOfMsgs",
              method: "DELETE",
            },

            // INTERNAL. Use GroupChat.readedOfMsgs.count() instead.
            "::count::GroupChat::readedOfMsgs": {
              url: urlBase + "/GroupChats/:id/readedOfMsgs/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#upsert
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#updateOrCreate
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#patchOrCreateWithWhere
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#update
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#destroyById
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#removeById
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#updateAttributes
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ReadedOfMsg id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `ReadedOfMsg` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.ReadedOfMsg#modelName
        * @propertyOf lbServices.ReadedOfMsg
        * @description
        * The name of the model represented by this $resource,
        * i.e. `ReadedOfMsg`.
        */
        R.modelName = "ReadedOfMsg";


            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#customer
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ReadedOfMsg id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::ReadedOfMsg::customer"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.ReadedOfMsg#groupChat
             * @methodOf lbServices.ReadedOfMsg
             *
             * @description
             *
             * Fetches belongsTo relation groupChat.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - ReadedOfMsg id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `GroupChat` object.)
             * </em>
             */
        R.groupChat = function() {
          var TargetResource = $injector.get("GroupChat");
          var action = TargetResource["::get::ReadedOfMsg::groupChat"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FriendRequest
 * @header lbServices.FriendRequest
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FriendRequest` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FriendRequest",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FriendRequests/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FriendRequest.request() instead.
            "prototype$__get__request": {
              url: urlBase + "/FriendRequests/:id/request",
              method: "GET",
            },

            // INTERNAL. Use FriendRequest.accept() instead.
            "prototype$__get__accept": {
              url: urlBase + "/FriendRequests/:id/accept",
              method: "GET",
            },

            // INTERNAL. Use FriendRequest.friendLists() instead.
            "prototype$__get__friendLists": {
              url: urlBase + "/FriendRequests/:id/friendLists",
              method: "GET",
            },

            // INTERNAL. Use FriendRequest.friendLists.create() instead.
            "prototype$__create__friendLists": {
              url: urlBase + "/FriendRequests/:id/friendLists",
              method: "POST",
            },

            // INTERNAL. Use FriendRequest.friendLists.update() instead.
            "prototype$__update__friendLists": {
              url: urlBase + "/FriendRequests/:id/friendLists",
              method: "PUT",
            },

            // INTERNAL. Use FriendRequest.friendLists.destroy() instead.
            "prototype$__destroy__friendLists": {
              url: urlBase + "/FriendRequests/:id/friendLists",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#create
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FriendRequests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#createMany
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FriendRequests",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#patchOrCreate
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/FriendRequests",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#replaceOrCreate
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FriendRequests/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#upsertWithWhere
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FriendRequests/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#exists
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FriendRequests/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#findById
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FriendRequests/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#replaceById
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FriendRequests/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#find
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FriendRequests",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#findOne
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FriendRequests/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#updateAll
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FriendRequests/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#deleteById
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FriendRequests/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#count
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FriendRequests/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#prototype$patchAttributes
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendRequest id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/FriendRequests/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#createChangeStream
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FriendRequests/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#getRequestData
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * get request data
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getRequestData": {
              url: urlBase + "/FriendRequests/getRequestData",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendRequests.findById() instead.
            "::findById::Customer::friendRequests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendRequests/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendRequests.destroyById() instead.
            "::destroyById::Customer::friendRequests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendRequests/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.friendRequests.updateById() instead.
            "::updateById::Customer::friendRequests": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendRequests/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.friendAccept.findById() instead.
            "::findById::Customer::friendAccept": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendAccept/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendAccept.destroyById() instead.
            "::destroyById::Customer::friendAccept": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendAccept/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.friendAccept.updateById() instead.
            "::updateById::Customer::friendAccept": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/friendAccept/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.friendRequests() instead.
            "::get::Customer::friendRequests": {
              isArray: true,
              url: urlBase + "/Customers/:id/friendRequests",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendRequests.create() instead.
            "::create::Customer::friendRequests": {
              url: urlBase + "/Customers/:id/friendRequests",
              method: "POST",
            },

            // INTERNAL. Use Customer.friendRequests.createMany() instead.
            "::createMany::Customer::friendRequests": {
              isArray: true,
              url: urlBase + "/Customers/:id/friendRequests",
              method: "POST",
            },

            // INTERNAL. Use Customer.friendRequests.destroyAll() instead.
            "::delete::Customer::friendRequests": {
              url: urlBase + "/Customers/:id/friendRequests",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.friendRequests.count() instead.
            "::count::Customer::friendRequests": {
              url: urlBase + "/Customers/:id/friendRequests/count",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendAccept() instead.
            "::get::Customer::friendAccept": {
              isArray: true,
              url: urlBase + "/Customers/:id/friendAccept",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendAccept.create() instead.
            "::create::Customer::friendAccept": {
              url: urlBase + "/Customers/:id/friendAccept",
              method: "POST",
            },

            // INTERNAL. Use Customer.friendAccept.createMany() instead.
            "::createMany::Customer::friendAccept": {
              isArray: true,
              url: urlBase + "/Customers/:id/friendAccept",
              method: "POST",
            },

            // INTERNAL. Use Customer.friendAccept.destroyAll() instead.
            "::delete::Customer::friendAccept": {
              url: urlBase + "/Customers/:id/friendAccept",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.friendAccept.count() instead.
            "::count::Customer::friendAccept": {
              url: urlBase + "/Customers/:id/friendAccept/count",
              method: "GET",
            },

            // INTERNAL. Use FriendList.friendRequest() instead.
            "::get::FriendList::friendRequest": {
              url: urlBase + "/FriendLists/:id/friendRequest",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#upsert
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#updateOrCreate
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#patchOrCreateWithWhere
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#update
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#destroyById
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#removeById
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#updateAttributes
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendRequest id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FriendRequest#modelName
        * @propertyOf lbServices.FriendRequest
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FriendRequest`.
        */
        R.modelName = "FriendRequest";


            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#request
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Fetches belongsTo relation request.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendRequest id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.request = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::FriendRequest::request"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#accept
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Fetches belongsTo relation accept.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendRequest id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.accept = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::FriendRequest::accept"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.FriendRequest.friendLists
     * @header lbServices.FriendRequest.friendLists
     * @object
     * @description
     *
     * The object `FriendRequest.friendLists` groups methods
     * manipulating `FriendList` instances related to `FriendRequest`.
     *
     * Call {@link lbServices.FriendRequest#friendLists FriendRequest.friendLists()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.FriendRequest#friendLists
             * @methodOf lbServices.FriendRequest
             *
             * @description
             *
             * Fetches hasOne relation friendLists.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendRequest id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::get::FriendRequest::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest.friendLists#create
             * @methodOf lbServices.FriendRequest.friendLists
             *
             * @description
             *
             * Creates a new instance in friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendRequest id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists.create = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::create::FriendRequest::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest.friendLists#createMany
             * @methodOf lbServices.FriendRequest.friendLists
             *
             * @description
             *
             * Creates a new instance in friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendRequest id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists.createMany = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::createMany::FriendRequest::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest.friendLists#destroy
             * @methodOf lbServices.FriendRequest.friendLists
             *
             * @description
             *
             * Deletes friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendRequest id
             *
             *  - `options` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.friendLists.destroy = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::destroy::FriendRequest::friendLists"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FriendRequest.friendLists#update
             * @methodOf lbServices.FriendRequest.friendLists
             *
             * @description
             *
             * Update friendLists of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendRequest id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R.friendLists.update = function() {
          var TargetResource = $injector.get("FriendList");
          var action = TargetResource["::update::FriendRequest::friendLists"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.FriendList
 * @header lbServices.FriendList
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `FriendList` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "FriendList",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/FriendLists/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use FriendList.friendRequest() instead.
            "prototype$__get__friendRequest": {
              url: urlBase + "/FriendLists/:id/friendRequest",
              method: "GET",
            },

            // INTERNAL. Use FriendList.customerChatList() instead.
            "prototype$__get__customerChatList": {
              url: urlBase + "/FriendLists/:id/customerChatList",
              method: "GET",
            },

            // INTERNAL. Use FriendList.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/FriendLists/:id/customer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#create
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/FriendLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#createMany
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/FriendLists",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#patchOrCreate
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/FriendLists",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#replaceOrCreate
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/FriendLists/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#upsertWithWhere
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/FriendLists/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#exists
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/FriendLists/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#findById
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/FriendLists/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#replaceById
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/FriendLists/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#find
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/FriendLists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#findOne
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/FriendLists/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#updateAll
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/FriendLists/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#deleteById
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/FriendLists/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#count
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/FriendLists/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#prototype$patchAttributes
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/FriendLists/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#createChangeStream
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/FriendLists/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.FriendList#getFriendList
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * get Friend List
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getFriendList": {
              url: urlBase + "/FriendLists/getFriendList",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendLists() instead.
            "::get::Customer::friendLists": {
              url: urlBase + "/Customers/:id/friendLists",
              method: "GET",
            },

            // INTERNAL. Use Customer.friendLists.create() instead.
            "::create::Customer::friendLists": {
              url: urlBase + "/Customers/:id/friendLists",
              method: "POST",
            },

            // INTERNAL. Use Customer.friendLists.createMany() instead.
            "::createMany::Customer::friendLists": {
              isArray: true,
              url: urlBase + "/Customers/:id/friendLists",
              method: "POST",
            },

            // INTERNAL. Use Customer.friendLists.update() instead.
            "::update::Customer::friendLists": {
              url: urlBase + "/Customers/:id/friendLists",
              method: "PUT",
            },

            // INTERNAL. Use Customer.friendLists.destroy() instead.
            "::destroy::Customer::friendLists": {
              url: urlBase + "/Customers/:id/friendLists",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerChatList.friendLists.findById() instead.
            "::findById::CustomerChatList::friendLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/friendLists/:fk",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.friendLists.destroyById() instead.
            "::destroyById::CustomerChatList::friendLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/friendLists/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerChatList.friendLists.updateById() instead.
            "::updateById::CustomerChatList::friendLists": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/CustomerChatLists/:id/friendLists/:fk",
              method: "PUT",
            },

            // INTERNAL. Use CustomerChatList.friendLists() instead.
            "::get::CustomerChatList::friendLists": {
              isArray: true,
              url: urlBase + "/CustomerChatLists/:id/friendLists",
              method: "GET",
            },

            // INTERNAL. Use CustomerChatList.friendLists.create() instead.
            "::create::CustomerChatList::friendLists": {
              url: urlBase + "/CustomerChatLists/:id/friendLists",
              method: "POST",
            },

            // INTERNAL. Use CustomerChatList.friendLists.createMany() instead.
            "::createMany::CustomerChatList::friendLists": {
              isArray: true,
              url: urlBase + "/CustomerChatLists/:id/friendLists",
              method: "POST",
            },

            // INTERNAL. Use CustomerChatList.friendLists.destroyAll() instead.
            "::delete::CustomerChatList::friendLists": {
              url: urlBase + "/CustomerChatLists/:id/friendLists",
              method: "DELETE",
            },

            // INTERNAL. Use CustomerChatList.friendLists.count() instead.
            "::count::CustomerChatList::friendLists": {
              url: urlBase + "/CustomerChatLists/:id/friendLists/count",
              method: "GET",
            },

            // INTERNAL. Use FriendRequest.friendLists() instead.
            "::get::FriendRequest::friendLists": {
              url: urlBase + "/FriendRequests/:id/friendLists",
              method: "GET",
            },

            // INTERNAL. Use FriendRequest.friendLists.create() instead.
            "::create::FriendRequest::friendLists": {
              url: urlBase + "/FriendRequests/:id/friendLists",
              method: "POST",
            },

            // INTERNAL. Use FriendRequest.friendLists.createMany() instead.
            "::createMany::FriendRequest::friendLists": {
              isArray: true,
              url: urlBase + "/FriendRequests/:id/friendLists",
              method: "POST",
            },

            // INTERNAL. Use FriendRequest.friendLists.update() instead.
            "::update::FriendRequest::friendLists": {
              url: urlBase + "/FriendRequests/:id/friendLists",
              method: "PUT",
            },

            // INTERNAL. Use FriendRequest.friendLists.destroy() instead.
            "::destroy::FriendRequest::friendLists": {
              url: urlBase + "/FriendRequests/:id/friendLists",
              method: "DELETE",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.FriendList#upsert
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FriendList#updateOrCreate
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.FriendList#patchOrCreateWithWhere
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.FriendList#update
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.FriendList#destroyById
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FriendList#removeById
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.FriendList#updateAttributes
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendList` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.FriendList#modelName
        * @propertyOf lbServices.FriendList
        * @description
        * The name of the model represented by this $resource,
        * i.e. `FriendList`.
        */
        R.modelName = "FriendList";


            /**
             * @ngdoc method
             * @name lbServices.FriendList#friendRequest
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Fetches belongsTo relation friendRequest.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `FriendRequest` object.)
             * </em>
             */
        R.friendRequest = function() {
          var TargetResource = $injector.get("FriendRequest");
          var action = TargetResource["::get::FriendList::friendRequest"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FriendList#customerChatList
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Fetches belongsTo relation customerChatList.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `CustomerChatList` object.)
             * </em>
             */
        R.customerChatList = function() {
          var TargetResource = $injector.get("CustomerChatList");
          var action = TargetResource["::get::FriendList::customerChatList"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.FriendList#customer
             * @methodOf lbServices.FriendList
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - FriendList id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::FriendList::customer"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.PrivateEditorNote
 * @header lbServices.PrivateEditorNote
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PrivateEditorNote` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "PrivateEditorNote",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/PrivateEditorNotes/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#create
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/PrivateEditorNotes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#createMany
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/PrivateEditorNotes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#patchOrCreate
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/PrivateEditorNotes",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#replaceOrCreate
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/PrivateEditorNotes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#upsertWithWhere
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/PrivateEditorNotes/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#exists
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/PrivateEditorNotes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#findById
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/PrivateEditorNotes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#replaceById
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/PrivateEditorNotes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#find
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/PrivateEditorNotes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#findOne
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/PrivateEditorNotes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#updateAll
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/PrivateEditorNotes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#deleteById
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/PrivateEditorNotes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#count
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/PrivateEditorNotes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#prototype$patchAttributes
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PrivateEditorNote id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/PrivateEditorNotes/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#createChangeStream
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/PrivateEditorNotes/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#getFindAll
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * getFindAll
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getFindAll": {
              url: urlBase + "/PrivateEditorNotes/getFindAll",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#getFindOne
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * getFindOne
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getFindOne": {
              url: urlBase + "/PrivateEditorNotes/getFindOne",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#upsert
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#updateOrCreate
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#patchOrCreateWithWhere
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#update
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#destroyById
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#removeById
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.PrivateEditorNote#updateAttributes
             * @methodOf lbServices.PrivateEditorNote
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PrivateEditorNote id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PrivateEditorNote` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.PrivateEditorNote#modelName
        * @propertyOf lbServices.PrivateEditorNote
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PrivateEditorNote`.
        */
        R.modelName = "PrivateEditorNote";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.PublicEditorNote
 * @header lbServices.PublicEditorNote
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PublicEditorNote` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "PublicEditorNote",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/PublicEditorNotes/:id",
          { 'id': '@id' },
          {

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#create
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/PublicEditorNotes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#createMany
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/PublicEditorNotes",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#patchOrCreate
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/PublicEditorNotes",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#replaceOrCreate
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/PublicEditorNotes/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#upsertWithWhere
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/PublicEditorNotes/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#exists
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/PublicEditorNotes/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#findById
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/PublicEditorNotes/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#replaceById
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/PublicEditorNotes/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#find
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/PublicEditorNotes",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#findOne
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/PublicEditorNotes/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#updateAll
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/PublicEditorNotes/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#deleteById
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/PublicEditorNotes/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#count
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/PublicEditorNotes/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#prototype$patchAttributes
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PublicEditorNote id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/PublicEditorNotes/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#createChangeStream
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/PublicEditorNotes/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#getFindAll
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * getFindAll
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getFindAll": {
              url: urlBase + "/PublicEditorNotes/getFindAll",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#getFindOne
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * getFindOne
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getFindOne": {
              url: urlBase + "/PublicEditorNotes/getFindOne",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#upsert
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#updateOrCreate
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#patchOrCreateWithWhere
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#update
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#destroyById
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#removeById
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.PublicEditorNote#updateAttributes
             * @methodOf lbServices.PublicEditorNote
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - PublicEditorNote id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `PublicEditorNote` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.PublicEditorNote#modelName
        * @propertyOf lbServices.PublicEditorNote
        * @description
        * The name of the model represented by this $resource,
        * i.e. `PublicEditorNote`.
        */
        R.modelName = "PublicEditorNote";



        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.Teenache
 * @header lbServices.Teenache
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Teenache` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "Teenache",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/Teenaches/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use Teenache.likeAndDisLikes.findById() instead.
            "prototype$__findById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/likeAndDisLikes/:fk",
              method: "GET",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.destroyById() instead.
            "prototype$__destroyById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/likeAndDisLikes/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.updateById() instead.
            "prototype$__updateById__likeAndDisLikes": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/likeAndDisLikes/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Teenache.teenacheCommands.findById() instead.
            "prototype$__findById__teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/teenacheCommands/:fk",
              method: "GET",
            },

            // INTERNAL. Use Teenache.teenacheCommands.destroyById() instead.
            "prototype$__destroyById__teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/teenacheCommands/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Teenache.teenacheCommands.updateById() instead.
            "prototype$__updateById__teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/teenacheCommands/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes() instead.
            "prototype$__get__likeAndDisLikes": {
              isArray: true,
              url: urlBase + "/Teenaches/:id/likeAndDisLikes",
              method: "GET",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.create() instead.
            "prototype$__create__likeAndDisLikes": {
              url: urlBase + "/Teenaches/:id/likeAndDisLikes",
              method: "POST",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.destroyAll() instead.
            "prototype$__delete__likeAndDisLikes": {
              url: urlBase + "/Teenaches/:id/likeAndDisLikes",
              method: "DELETE",
            },

            // INTERNAL. Use Teenache.likeAndDisLikes.count() instead.
            "prototype$__count__likeAndDisLikes": {
              url: urlBase + "/Teenaches/:id/likeAndDisLikes/count",
              method: "GET",
            },

            // INTERNAL. Use Teenache.teenacheCommands() instead.
            "prototype$__get__teenacheCommands": {
              isArray: true,
              url: urlBase + "/Teenaches/:id/teenacheCommands",
              method: "GET",
            },

            // INTERNAL. Use Teenache.teenacheCommands.create() instead.
            "prototype$__create__teenacheCommands": {
              url: urlBase + "/Teenaches/:id/teenacheCommands",
              method: "POST",
            },

            // INTERNAL. Use Teenache.teenacheCommands.destroyAll() instead.
            "prototype$__delete__teenacheCommands": {
              url: urlBase + "/Teenaches/:id/teenacheCommands",
              method: "DELETE",
            },

            // INTERNAL. Use Teenache.teenacheCommands.count() instead.
            "prototype$__count__teenacheCommands": {
              url: urlBase + "/Teenaches/:id/teenacheCommands/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#create
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/Teenaches",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#createMany
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/Teenaches",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#patchOrCreate
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/Teenaches",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#replaceOrCreate
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/Teenaches/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#upsertWithWhere
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/Teenaches/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#exists
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/Teenaches/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#findById
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/Teenaches/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#replaceById
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/Teenaches/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#find
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/Teenaches",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#findOne
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/Teenaches/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#updateAll
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/Teenaches/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#deleteById
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/Teenaches/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#count
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/Teenaches/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#prototype$patchAttributes
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/Teenaches/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#createChangeStream
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/Teenaches/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#getById
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * getTeenache
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getById": {
              url: urlBase + "/Teenaches/getById",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.Teenache#getTeenache
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * getTeenache
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "getTeenache": {
              url: urlBase + "/Teenaches/getTeenache",
              method: "GET",
            },

            // INTERNAL. Use LikeAndDisLike.teenache() instead.
            "::get::LikeAndDisLike::teenache": {
              url: urlBase + "/LikeAndDisLikes/:id/teenache",
              method: "GET",
            },

            // INTERNAL. Use TeenacheCommand.teenache() instead.
            "::get::TeenacheCommand::teenache": {
              url: urlBase + "/TeenacheCommands/:id/teenache",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.Teenache#upsert
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Teenache#updateOrCreate
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.Teenache#patchOrCreateWithWhere
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.Teenache#update
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.Teenache#destroyById
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Teenache#removeById
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.Teenache#updateAttributes
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.Teenache#modelName
        * @propertyOf lbServices.Teenache
        * @description
        * The name of the model represented by this $resource,
        * i.e. `Teenache`.
        */
        R.modelName = "Teenache";

    /**
     * @ngdoc object
     * @name lbServices.Teenache.likeAndDisLikes
     * @header lbServices.Teenache.likeAndDisLikes
     * @object
     * @description
     *
     * The object `Teenache.likeAndDisLikes` groups methods
     * manipulating `LikeAndDisLike` instances related to `Teenache`.
     *
     * Call {@link lbServices.Teenache#likeAndDisLikes Teenache.likeAndDisLikes()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Teenache#likeAndDisLikes
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Queries likeAndDisLikes of Teenache.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::get::Teenache::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.likeAndDisLikes#count
             * @methodOf lbServices.Teenache.likeAndDisLikes
             *
             * @description
             *
             * Counts likeAndDisLikes of Teenache.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.likeAndDisLikes.count = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::count::Teenache::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.likeAndDisLikes#create
             * @methodOf lbServices.Teenache.likeAndDisLikes
             *
             * @description
             *
             * Creates a new instance in likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.create = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::create::Teenache::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.likeAndDisLikes#createMany
             * @methodOf lbServices.Teenache.likeAndDisLikes
             *
             * @description
             *
             * Creates a new instance in likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.createMany = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::createMany::Teenache::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.likeAndDisLikes#destroyAll
             * @methodOf lbServices.Teenache.likeAndDisLikes
             *
             * @description
             *
             * Deletes all likeAndDisLikes of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeAndDisLikes.destroyAll = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::delete::Teenache::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.likeAndDisLikes#destroyById
             * @methodOf lbServices.Teenache.likeAndDisLikes
             *
             * @description
             *
             * Delete a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.likeAndDisLikes.destroyById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::destroyById::Teenache::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.likeAndDisLikes#findById
             * @methodOf lbServices.Teenache.likeAndDisLikes
             *
             * @description
             *
             * Find a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.findById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::findById::Teenache::likeAndDisLikes"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.likeAndDisLikes#updateById
             * @methodOf lbServices.Teenache.likeAndDisLikes
             *
             * @description
             *
             * Update a related item by id for likeAndDisLikes.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `fk` – `{*}` - Foreign key for likeAndDisLikes
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `LikeAndDisLike` object.)
             * </em>
             */
        R.likeAndDisLikes.updateById = function() {
          var TargetResource = $injector.get("LikeAndDisLike");
          var action = TargetResource["::updateById::Teenache::likeAndDisLikes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Teenache.teenacheCommands
     * @header lbServices.Teenache.teenacheCommands
     * @object
     * @description
     *
     * The object `Teenache.teenacheCommands` groups methods
     * manipulating `TeenacheCommand` instances related to `Teenache`.
     *
     * Call {@link lbServices.Teenache#teenacheCommands Teenache.teenacheCommands()}
     * to query all related instances.
     */


            /**
             * @ngdoc method
             * @name lbServices.Teenache#teenacheCommands
             * @methodOf lbServices.Teenache
             *
             * @description
             *
             * Queries teenacheCommands of Teenache.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `filter` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R.teenacheCommands = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::get::Teenache::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.teenacheCommands#count
             * @methodOf lbServices.Teenache.teenacheCommands
             *
             * @description
             *
             * Counts teenacheCommands of Teenache.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
        R.teenacheCommands.count = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::count::Teenache::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.teenacheCommands#create
             * @methodOf lbServices.Teenache.teenacheCommands
             *
             * @description
             *
             * Creates a new instance in teenacheCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R.teenacheCommands.create = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::create::Teenache::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.teenacheCommands#createMany
             * @methodOf lbServices.Teenache.teenacheCommands
             *
             * @description
             *
             * Creates a new instance in teenacheCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R.teenacheCommands.createMany = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::createMany::Teenache::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.teenacheCommands#destroyAll
             * @methodOf lbServices.Teenache.teenacheCommands
             *
             * @description
             *
             * Deletes all teenacheCommands of this model.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `where` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teenacheCommands.destroyAll = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::delete::Teenache::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.teenacheCommands#destroyById
             * @methodOf lbServices.Teenache.teenacheCommands
             *
             * @description
             *
             * Delete a related item by id for teenacheCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for teenacheCommands
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * This method returns no data.
             */
        R.teenacheCommands.destroyById = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::destroyById::Teenache::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.teenacheCommands#findById
             * @methodOf lbServices.Teenache.teenacheCommands
             *
             * @description
             *
             * Find a related item by id for teenacheCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `options` – `{object=}` -
             *
             *  - `fk` – `{*}` - Foreign key for teenacheCommands
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R.teenacheCommands.findById = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::findById::Teenache::teenacheCommands"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.Teenache.teenacheCommands#updateById
             * @methodOf lbServices.Teenache.teenacheCommands
             *
             * @description
             *
             * Update a related item by id for teenacheCommands.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Teenache id
             *
             *  - `fk` – `{*}` - Foreign key for teenacheCommands
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R.teenacheCommands.updateById = function() {
          var TargetResource = $injector.get("TeenacheCommand");
          var action = TargetResource["::updateById::Teenache::teenacheCommands"];
          return action.apply(R, arguments);
        };


        return R;
      }]);

/**
 * @ngdoc object
 * @name lbServices.TeenacheCommand
 * @header lbServices.TeenacheCommand
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `TeenacheCommand` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
  module.factory(
    "TeenacheCommand",
    [
      'LoopBackResource', 'LoopBackAuth', '$injector', '$q',
      function(LoopBackResource, LoopBackAuth, $injector, $q) {
        var R = LoopBackResource(
        urlBase + "/TeenacheCommands/:id",
          { 'id': '@id' },
          {

            // INTERNAL. Use TeenacheCommand.teenache() instead.
            "prototype$__get__teenache": {
              url: urlBase + "/TeenacheCommands/:id/teenache",
              method: "GET",
            },

            // INTERNAL. Use TeenacheCommand.customer() instead.
            "prototype$__get__customer": {
              url: urlBase + "/TeenacheCommands/:id/customer",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#create
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "create": {
              url: urlBase + "/TeenacheCommands",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#createMany
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Create a new instance of the model and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "createMany": {
              isArray: true,
              url: urlBase + "/TeenacheCommands",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#patchOrCreate
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "patchOrCreate": {
              url: urlBase + "/TeenacheCommands",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#replaceOrCreate
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Replace an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "replaceOrCreate": {
              url: urlBase + "/TeenacheCommands/replaceOrCreate",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#upsertWithWhere
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "upsertWithWhere": {
              url: urlBase + "/TeenacheCommands/upsertWithWhere",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#exists
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Check whether a model instance exists in the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `exists` – `{boolean=}` -
             */
            "exists": {
              url: urlBase + "/TeenacheCommands/:id/exists",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#findById
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Find a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `filter` – `{object=}` - Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "findById": {
              url: urlBase + "/TeenacheCommands/:id",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#replaceById
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Replace attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "replaceById": {
              url: urlBase + "/TeenacheCommands/:id/replace",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#find
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Find all instances of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Array.<Object>,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Array.<Object>} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "find": {
              isArray: true,
              url: urlBase + "/TeenacheCommands",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#findOne
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Find first instance of the model matched by filter from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string (`{"where":{"something":"value"}}`).  See https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries for more details.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "findOne": {
              url: urlBase + "/TeenacheCommands/findOne",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#updateAll
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
            "updateAll": {
              url: urlBase + "/TeenacheCommands/update",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#deleteById
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "deleteById": {
              url: urlBase + "/TeenacheCommands/:id",
              method: "DELETE",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#count
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Count instances of the model matched by where from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `count` – `{number=}` -
             */
            "count": {
              url: urlBase + "/TeenacheCommands/count",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#prototype$patchAttributes
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - TeenacheCommand id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
            "prototype$patchAttributes": {
              url: urlBase + "/TeenacheCommands/:id",
              method: "PATCH",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#createChangeStream
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Create a change stream.
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `changes` – `{ReadableStream=}` -
             */
            "createChangeStream": {
              url: urlBase + "/TeenacheCommands/change-stream",
              method: "POST",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#findCommands
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * findCommands
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "findCommands": {
              url: urlBase + "/TeenacheCommands/findCommands",
              method: "GET",
            },

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#createCommand
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * createCommand
             *
             * @param {Object=} parameters Request parameters.
             *
             *   This method does not accept any parameters.
             *   Supply an empty object or omit this argument altogether.
             *
             * @param {Object} postData Request data.
             *
             *  - `params` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Data properties:
             *
             *  - `data` – `{object=}` -
             */
            "createCommand": {
              url: urlBase + "/TeenacheCommands/createCommand",
              method: "POST",
            },

            // INTERNAL. Use Customer.teenacheCommands.findById() instead.
            "::findById::Customer::teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/teenacheCommands/:fk",
              method: "GET",
            },

            // INTERNAL. Use Customer.teenacheCommands.destroyById() instead.
            "::destroyById::Customer::teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/teenacheCommands/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.teenacheCommands.updateById() instead.
            "::updateById::Customer::teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Customers/:id/teenacheCommands/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Customer.teenacheCommands() instead.
            "::get::Customer::teenacheCommands": {
              isArray: true,
              url: urlBase + "/Customers/:id/teenacheCommands",
              method: "GET",
            },

            // INTERNAL. Use Customer.teenacheCommands.create() instead.
            "::create::Customer::teenacheCommands": {
              url: urlBase + "/Customers/:id/teenacheCommands",
              method: "POST",
            },

            // INTERNAL. Use Customer.teenacheCommands.createMany() instead.
            "::createMany::Customer::teenacheCommands": {
              isArray: true,
              url: urlBase + "/Customers/:id/teenacheCommands",
              method: "POST",
            },

            // INTERNAL. Use Customer.teenacheCommands.destroyAll() instead.
            "::delete::Customer::teenacheCommands": {
              url: urlBase + "/Customers/:id/teenacheCommands",
              method: "DELETE",
            },

            // INTERNAL. Use Customer.teenacheCommands.count() instead.
            "::count::Customer::teenacheCommands": {
              url: urlBase + "/Customers/:id/teenacheCommands/count",
              method: "GET",
            },

            // INTERNAL. Use Teenache.teenacheCommands.findById() instead.
            "::findById::Teenache::teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/teenacheCommands/:fk",
              method: "GET",
            },

            // INTERNAL. Use Teenache.teenacheCommands.destroyById() instead.
            "::destroyById::Teenache::teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/teenacheCommands/:fk",
              method: "DELETE",
            },

            // INTERNAL. Use Teenache.teenacheCommands.updateById() instead.
            "::updateById::Teenache::teenacheCommands": {
              params: {
                'fk': '@fk',
              },
              url: urlBase + "/Teenaches/:id/teenacheCommands/:fk",
              method: "PUT",
            },

            // INTERNAL. Use Teenache.teenacheCommands() instead.
            "::get::Teenache::teenacheCommands": {
              isArray: true,
              url: urlBase + "/Teenaches/:id/teenacheCommands",
              method: "GET",
            },

            // INTERNAL. Use Teenache.teenacheCommands.create() instead.
            "::create::Teenache::teenacheCommands": {
              url: urlBase + "/Teenaches/:id/teenacheCommands",
              method: "POST",
            },

            // INTERNAL. Use Teenache.teenacheCommands.createMany() instead.
            "::createMany::Teenache::teenacheCommands": {
              isArray: true,
              url: urlBase + "/Teenaches/:id/teenacheCommands",
              method: "POST",
            },

            // INTERNAL. Use Teenache.teenacheCommands.destroyAll() instead.
            "::delete::Teenache::teenacheCommands": {
              url: urlBase + "/Teenaches/:id/teenacheCommands",
              method: "DELETE",
            },

            // INTERNAL. Use Teenache.teenacheCommands.count() instead.
            "::count::Teenache::teenacheCommands": {
              url: urlBase + "/Teenaches/:id/teenacheCommands/count",
              method: "GET",
            },
          }
        );



            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#upsert
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R["upsert"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#updateOrCreate
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Patch an existing model instance or insert a new one into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `data` – `{object=}` - Model instance data
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R["updateOrCreate"] = R["patchOrCreate"];

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#patchOrCreateWithWhere
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Update an existing model instance or insert a new one into the data source based on the where criteria.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R["patchOrCreateWithWhere"] = R["upsertWithWhere"];

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#update
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Update instances of the model matched by {{where}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `where` – `{object=}` - Criteria to match model instances
             *
             * @param {Object} postData Request data.
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * Information related to the outcome of the operation
             */
        R["update"] = R["updateAll"];

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#destroyById
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R["destroyById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#removeById
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Delete a model instance by {{id}} from the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - Model id
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R["removeById"] = R["deleteById"];

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#updateAttributes
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Patch attributes for a model instance and persist it into the data source.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - TeenacheCommand id
             *
             *  - `options` – `{object=}` -
             *
             *  - `data` – `{object=}` - An object of model property name/value pairs
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `TeenacheCommand` object.)
             * </em>
             */
        R["updateAttributes"] = R["prototype$patchAttributes"];


        /**
        * @ngdoc property
        * @name lbServices.TeenacheCommand#modelName
        * @propertyOf lbServices.TeenacheCommand
        * @description
        * The name of the model represented by this $resource,
        * i.e. `TeenacheCommand`.
        */
        R.modelName = "TeenacheCommand";


            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#teenache
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Fetches belongsTo relation teenache.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - TeenacheCommand id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Teenache` object.)
             * </em>
             */
        R.teenache = function() {
          var TargetResource = $injector.get("Teenache");
          var action = TargetResource["::get::TeenacheCommand::teenache"];
          return action.apply(R, arguments);
        };

            /**
             * @ngdoc method
             * @name lbServices.TeenacheCommand#customer
             * @methodOf lbServices.TeenacheCommand
             *
             * @description
             *
             * Fetches belongsTo relation customer.
             *
             * @param {Object=} parameters Request parameters.
             *
             *  - `id` – `{*}` - TeenacheCommand id
             *
             *  - `options` – `{object=}` -
             *
             *  - `refresh` – `{boolean=}` -
             *
             *  - `options` – `{object=}` -
             *
             * @param {function(Object,Object)=} successCb
             *   Success callback with two arguments: `value`, `responseHeaders`.
             *
             * @param {function(Object)=} errorCb Error callback with one argument:
             *   `httpResponse`.
             *
             * @returns {Object} An empty reference that will be
             *   populated with the actual data once the response is returned
             *   from the server.
             *
             * <em>
             * (The remote method definition does not provide any description.
             * This usually means the response is a `Customer` object.)
             * </em>
             */
        R.customer = function() {
          var TargetResource = $injector.get("Customer");
          var action = TargetResource["::get::TeenacheCommand::customer"];
          return action.apply(R, arguments);
        };


        return R;
      }]);


  module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    };

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    };

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch (err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', ['$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 }},
              status: 401,
              config: config,
              headers: function() { return undefined; },
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        },
      };
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the header name that is used for sending the authentication token.
     */
    this.getAuthHeader = function() {
      return authHeader;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      var LoopBackResource = function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };

      LoopBackResource.getUrlBase = function() {
        return urlBase;
      };

      LoopBackResource.getAuthHeader = function() {
        return authHeader;
      };

      return LoopBackResource;
    }];
  });
})(window, window.angular);
